/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduloinsectocacadores;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Rafael
 */
public class Insectocadores extends javax.swing.JFrame {

    /* VARIAVEIS PARA A LIGAÇÃO A BASE DE DADOS */
    String url = "jdbc:derby://localhost:1527/insectocacadores";
    Connection con;
    String sql;
    
    DefaultTableModel model;
    
    
    
    /*  VARIAVEL PARA CONTAR AS LINHAS DAS LIMPEZAS*/
    int CONTA_LINHAS_LIMPEZAS = 0;
    int CONTA_LINHAS_CONTROLORESULTADOS = 0;
    int CONTA_LINHAS_NAOCONFORMIDADES = 0;
    
    
    /*  VARIAVEL QUE GUARDA O ID NO INSECTOCAÇADOR SELECCIONADO  */
    int idInsectocacadorSelecionado = 0;
    
    /*  VARIVAVEL QUE GUARDA O ID DO FUNCINONARIO SELECCIONADO NUM CONTROLO DE RESULTADOS  */
    int idFuncionarioSelecionadoNaoConformidade = 0;
    int idControloResuladoSeleccionado = 0;
    
    /**
     * Creates new form Insectocadores
     */
    public Insectocadores() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogMenuInsectocacadores = new javax.swing.JDialog();
        jPanelMenuInsectocadores = new javax.swing.JPanel();
        jButtonNovoInsecto = new javax.swing.JButton();
        jButtonConsultaInsecto = new javax.swing.JButton();
        jDialogNovoInsectocacador = new javax.swing.JDialog();
        jPanelNovoInsectocacador = new javax.swing.JPanel();
        jLabelNome = new javax.swing.JLabel();
        jLabelReferencia = new javax.swing.JLabel();
        jLabelLocal = new javax.swing.JLabel();
        jTextFieldReferenciaInsecto = new javax.swing.JTextField();
        jTextFieldNomeInsecto = new javax.swing.JTextField();
        jTextFieldLocalInsecto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonGuardarInsecto = new javax.swing.JButton();
        jButtonSairInsecto = new javax.swing.JButton();
        jButtonActualizarInsecto = new javax.swing.JButton();
        jDialogConsultaInsectocacadores = new javax.swing.JDialog();
        jPanelConsultaInsecto = new javax.swing.JPanel();
        jScrollPaneConsultInsecto = new javax.swing.JScrollPane();
        jTableConsultaInsecto = new javax.swing.JTable();
        jButtonAddNovoInsecto = new javax.swing.JButton();
        jButtonSairConsultaInsecto = new javax.swing.JButton();
        jButtonNovaLimpeza = new javax.swing.JButton();
        jButtonConsultarLimpezas = new javax.swing.JButton();
        jButtonEditarInsectoca = new javax.swing.JButton();
        jButtonControloResultadosInsectoca = new javax.swing.JButton();
        jTextFieldPesquisaInsectocacador = new javax.swing.JTextField();
        jLabelPesquisarInsectocacador = new javax.swing.JLabel();
        jDialogNovaLimpeza = new javax.swing.JDialog();
        jPanelNovaLimpeza = new javax.swing.JPanel();
        jLabelFuncionarioResponsavel = new javax.swing.JLabel();
        jLabelData = new javax.swing.JLabel();
        jComboBoxFuncionarioResponsvelLimpeza = new javax.swing.JComboBox();
        jDateChooserLimpeza = new com.toedter.calendar.JDateChooser();
        jButtonGuardarLimpeza = new javax.swing.JButton();
        jButtonSairLimpeza = new javax.swing.JButton();
        jDialogConsultaLimpezas = new javax.swing.JDialog();
        jPanelConsultaLimpezas = new javax.swing.JPanel();
        jScrollPaneConsultaLimpezas = new javax.swing.JScrollPane();
        jTableConsultaLimpezas = new javax.swing.JTable();
        jButtonNovaLimpezaConsultaLimpezas = new javax.swing.JButton();
        jButtonSairConsultaLimpezas = new javax.swing.JButton();
        jDialogConsultaControloResultadosLimpezas = new javax.swing.JDialog();
        jPanelConsultaControloResultados = new javax.swing.JPanel();
        jScrollPaneConsultaResultadosInsectadores = new javax.swing.JScrollPane();
        jTableConsultaResultadosInsectadors = new javax.swing.JTable();
        jButtonVerNaoConformidades = new javax.swing.JButton();
        jButtonSairControloResultados = new javax.swing.JButton();
        jDialogConsultaNaoConformidadesInsectocacadores = new javax.swing.JDialog();
        jPanelConsultaNaoConformidadesLimpeza = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConsultaNaoConformidadesInsectocacadores = new javax.swing.JTable();
        jButtonVoltarNaoConformidades = new javax.swing.JButton();
        jPanelLoginInsectocadores = new javax.swing.JPanel();
        jButtonEntrar = new javax.swing.JButton();

        jDialogMenuInsectocacadores.setTitle("MENU INSECTOCAÇADORES");
        jDialogMenuInsectocacadores.setMinimumSize(new java.awt.Dimension(467, 194));

        jButtonNovoInsecto.setText("Novo Insectocaçador");
        jButtonNovoInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoInsectoActionPerformed(evt);
            }
        });

        jButtonConsultaInsecto.setText("Consulta Insectocaçadores");
        jButtonConsultaInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaInsectoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenuInsectocadoresLayout = new javax.swing.GroupLayout(jPanelMenuInsectocadores);
        jPanelMenuInsectocadores.setLayout(jPanelMenuInsectocadoresLayout);
        jPanelMenuInsectocadoresLayout.setHorizontalGroup(
            jPanelMenuInsectocadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuInsectocadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNovoInsecto)
                .addGap(71, 71, 71)
                .addComponent(jButtonConsultaInsecto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMenuInsectocadoresLayout.setVerticalGroup(
            jPanelMenuInsectocadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuInsectocadoresLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanelMenuInsectocadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovoInsecto)
                    .addComponent(jButtonConsultaInsecto))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogMenuInsectocacadoresLayout = new javax.swing.GroupLayout(jDialogMenuInsectocacadores.getContentPane());
        jDialogMenuInsectocacadores.getContentPane().setLayout(jDialogMenuInsectocacadoresLayout);
        jDialogMenuInsectocacadoresLayout.setHorizontalGroup(
            jDialogMenuInsectocacadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogMenuInsectocacadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelMenuInsectocadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jDialogMenuInsectocacadoresLayout.setVerticalGroup(
            jDialogMenuInsectocacadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogMenuInsectocacadoresLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanelMenuInsectocadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jDialogNovoInsectocacador.setTitle("NOVO INSECTOCAÇADOR");
        jDialogNovoInsectocacador.setMinimumSize(new java.awt.Dimension(352, 306));

        jLabelNome.setText("Nome");

        jLabelReferencia.setText("Referencia");

        jLabelLocal.setText("Local");

        jTextFieldNomeInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeInsectoActionPerformed(evt);
            }
        });

        jLabel1.setText("Novo Insectocaçador");

        jButtonGuardarInsecto.setText("Guardar");
        jButtonGuardarInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarInsectoActionPerformed(evt);
            }
        });

        jButtonSairInsecto.setText("Sair");
        jButtonSairInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairInsectoActionPerformed(evt);
            }
        });

        jButtonActualizarInsecto.setText("Actualizar");
        jButtonActualizarInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarInsectoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNovoInsectocacadorLayout = new javax.swing.GroupLayout(jPanelNovoInsectocacador);
        jPanelNovoInsectocacador.setLayout(jPanelNovoInsectocacadorLayout);
        jPanelNovoInsectocacadorLayout.setHorizontalGroup(
            jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                        .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelReferencia)
                                    .addComponent(jLabelNome)
                                    .addComponent(jLabelLocal))
                                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(jTextFieldLocalInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNovoInsectocacadorLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldReferenciaInsecto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldNomeInsecto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonGuardarInsecto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonActualizarInsecto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSairInsecto)))
                .addContainerGap())
        );
        jPanelNovoInsectocacadorLayout.setVerticalGroup(
            jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNovoInsectocacadorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelReferencia)
                    .addComponent(jTextFieldReferenciaInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNovoInsectocacadorLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabelNome)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNovoInsectocacadorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNomeInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelLocal)
                    .addComponent(jTextFieldLocalInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanelNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardarInsecto)
                    .addComponent(jButtonSairInsecto)
                    .addComponent(jButtonActualizarInsecto))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout jDialogNovoInsectocacadorLayout = new javax.swing.GroupLayout(jDialogNovoInsectocacador.getContentPane());
        jDialogNovoInsectocacador.getContentPane().setLayout(jDialogNovoInsectocacadorLayout);
        jDialogNovoInsectocacadorLayout.setHorizontalGroup(
            jDialogNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovoInsectocacadorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovoInsectocacador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jDialogNovoInsectocacadorLayout.setVerticalGroup(
            jDialogNovoInsectocacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovoInsectocacadorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovoInsectocacador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jDialogConsultaInsectocacadores.setTitle("CONSULTA INSECTOCADORES");
        jDialogConsultaInsectocacadores.setMinimumSize(new java.awt.Dimension(672, 412));

        jTableConsultaInsecto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Referencia", "Nome", "Local"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneConsultInsecto.setViewportView(jTableConsultaInsecto);

        jButtonAddNovoInsecto.setText("Novo Insecto.");
        jButtonAddNovoInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNovoInsectoActionPerformed(evt);
            }
        });

        jButtonSairConsultaInsecto.setText("Voltar");
        jButtonSairConsultaInsecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairConsultaInsectoActionPerformed(evt);
            }
        });

        jButtonNovaLimpeza.setText("Nova Limpeza");
        jButtonNovaLimpeza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaLimpezaActionPerformed(evt);
            }
        });

        jButtonConsultarLimpezas.setText("Consultar Limpezas");
        jButtonConsultarLimpezas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarLimpezasActionPerformed(evt);
            }
        });

        jButtonEditarInsectoca.setText("Editar");
        jButtonEditarInsectoca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarInsectocaActionPerformed(evt);
            }
        });

        jButtonControloResultadosInsectoca.setText("Controlo Resultados");
        jButtonControloResultadosInsectoca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonControloResultadosInsectocaActionPerformed(evt);
            }
        });

        jTextFieldPesquisaInsectocacador.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldPesquisaInsectocacadorCaretUpdate(evt);
            }
        });

        jLabelPesquisarInsectocacador.setText("Pesquisar");

        javax.swing.GroupLayout jPanelConsultaInsectoLayout = new javax.swing.GroupLayout(jPanelConsultaInsecto);
        jPanelConsultaInsecto.setLayout(jPanelConsultaInsectoLayout);
        jPanelConsultaInsectoLayout.setHorizontalGroup(
            jPanelConsultaInsectoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaInsectoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaInsectoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneConsultInsecto, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addGroup(jPanelConsultaInsectoLayout.createSequentialGroup()
                        .addComponent(jButtonAddNovoInsecto)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNovaLimpeza)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSairConsultaInsecto))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaInsectoLayout.createSequentialGroup()
                        .addComponent(jTextFieldPesquisaInsectocacador, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonConsultarLimpezas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEditarInsectoca)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonControloResultadosInsectoca))
                    .addGroup(jPanelConsultaInsectoLayout.createSequentialGroup()
                        .addComponent(jLabelPesquisarInsectocacador)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelConsultaInsectoLayout.setVerticalGroup(
            jPanelConsultaInsectoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaInsectoLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabelPesquisarInsectocacador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConsultaInsectoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEditarInsectoca)
                    .addComponent(jButtonControloResultadosInsectoca)
                    .addComponent(jTextFieldPesquisaInsectocacador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConsultarLimpezas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneConsultInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelConsultaInsectoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSairConsultaInsecto)
                    .addGroup(jPanelConsultaInsectoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAddNovoInsecto)
                        .addComponent(jButtonNovaLimpeza)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaInsectocacadoresLayout = new javax.swing.GroupLayout(jDialogConsultaInsectocacadores.getContentPane());
        jDialogConsultaInsectocacadores.getContentPane().setLayout(jDialogConsultaInsectocacadoresLayout);
        jDialogConsultaInsectocacadoresLayout.setHorizontalGroup(
            jDialogConsultaInsectocacadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaInsectocacadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jDialogConsultaInsectocacadoresLayout.setVerticalGroup(
            jDialogConsultaInsectocacadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogConsultaInsectocacadoresLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jPanelConsultaInsecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        jDialogNovaLimpeza.setTitle("NOVA LIMPEZA");
        jDialogNovaLimpeza.setMinimumSize(new java.awt.Dimension(421, 301));

        jLabelFuncionarioResponsavel.setText("Funcionario Responsavel");

        jLabelData.setText("Data");

        jComboBoxFuncionarioResponsvelLimpeza.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonGuardarLimpeza.setText("Guardar");
        jButtonGuardarLimpeza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarLimpezaActionPerformed(evt);
            }
        });

        jButtonSairLimpeza.setText("Sair");
        jButtonSairLimpeza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairLimpezaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNovaLimpezaLayout = new javax.swing.GroupLayout(jPanelNovaLimpeza);
        jPanelNovaLimpeza.setLayout(jPanelNovaLimpezaLayout);
        jPanelNovaLimpezaLayout.setHorizontalGroup(
            jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovaLimpezaLayout.createSequentialGroup()
                .addGroup(jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelNovaLimpezaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFuncionarioResponsavel)
                            .addComponent(jLabelData, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxFuncionarioResponsvelLimpeza, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooserLimpeza, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)))
                    .addGroup(jPanelNovaLimpezaLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jButtonGuardarLimpeza)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSairLimpeza)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanelNovaLimpezaLayout.setVerticalGroup(
            jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovaLimpezaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFuncionarioResponsavel)
                    .addComponent(jComboBoxFuncionarioResponsvelLimpeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelData)
                    .addComponent(jDateChooserLimpeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanelNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardarLimpeza)
                    .addComponent(jButtonSairLimpeza))
                .addGap(101, 101, 101))
        );

        javax.swing.GroupLayout jDialogNovaLimpezaLayout = new javax.swing.GroupLayout(jDialogNovaLimpeza.getContentPane());
        jDialogNovaLimpeza.getContentPane().setLayout(jDialogNovaLimpezaLayout);
        jDialogNovaLimpezaLayout.setHorizontalGroup(
            jDialogNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaLimpezaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovaLimpeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogNovaLimpezaLayout.setVerticalGroup(
            jDialogNovaLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaLimpezaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovaLimpeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jDialogConsultaLimpezas.setTitle("CONSULTA LIMPEZAS");
        jDialogConsultaLimpezas.setMinimumSize(new java.awt.Dimension(621, 324));

        jTableConsultaLimpezas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Insectocaçador", "Funcionario", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneConsultaLimpezas.setViewportView(jTableConsultaLimpezas);

        jButtonNovaLimpezaConsultaLimpezas.setText("Nova Limpeza");
        jButtonNovaLimpezaConsultaLimpezas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaLimpezaConsultaLimpezasActionPerformed(evt);
            }
        });

        jButtonSairConsultaLimpezas.setText("Sair");
        jButtonSairConsultaLimpezas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairConsultaLimpezasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaLimpezasLayout = new javax.swing.GroupLayout(jPanelConsultaLimpezas);
        jPanelConsultaLimpezas.setLayout(jPanelConsultaLimpezasLayout);
        jPanelConsultaLimpezasLayout.setHorizontalGroup(
            jPanelConsultaLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaLimpezasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneConsultaLimpezas, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                    .addGroup(jPanelConsultaLimpezasLayout.createSequentialGroup()
                        .addComponent(jButtonNovaLimpezaConsultaLimpezas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSairConsultaLimpezas)))
                .addContainerGap())
        );
        jPanelConsultaLimpezasLayout.setVerticalGroup(
            jPanelConsultaLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaLimpezasLayout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(jScrollPaneConsultaLimpezas, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConsultaLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovaLimpezaConsultaLimpezas)
                    .addComponent(jButtonSairConsultaLimpezas))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jDialogConsultaLimpezasLayout = new javax.swing.GroupLayout(jDialogConsultaLimpezas.getContentPane());
        jDialogConsultaLimpezas.getContentPane().setLayout(jDialogConsultaLimpezasLayout);
        jDialogConsultaLimpezasLayout.setHorizontalGroup(
            jDialogConsultaLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaLimpezasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaLimpezas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialogConsultaLimpezasLayout.setVerticalGroup(
            jDialogConsultaLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaLimpezasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaLimpezas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jDialogConsultaControloResultadosLimpezas.setTitle("CONSULTA CONTROLO DE RESULTADOS(LIMPEZAS)");
        jDialogConsultaControloResultadosLimpezas.setMinimumSize(new java.awt.Dimension(998, 408));

        jTableConsultaResultadosInsectadors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionario", "Insectador", "Data", "Resultado", "Ficha Tecn.", "Descrição"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneConsultaResultadosInsectadores.setViewportView(jTableConsultaResultadosInsectadors);

        jButtonVerNaoConformidades.setText("Ver Não Conformidades do Insectador");
        jButtonVerNaoConformidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerNaoConformidadesActionPerformed(evt);
            }
        });

        jButtonSairControloResultados.setText("Voltar");
        jButtonSairControloResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairControloResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaControloResultadosLayout = new javax.swing.GroupLayout(jPanelConsultaControloResultados);
        jPanelConsultaControloResultados.setLayout(jPanelConsultaControloResultadosLayout);
        jPanelConsultaControloResultadosLayout.setHorizontalGroup(
            jPanelConsultaControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaControloResultadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneConsultaResultadosInsectadores, javax.swing.GroupLayout.DEFAULT_SIZE, 940, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaControloResultadosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelConsultaControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonVerNaoConformidades, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonSairControloResultados, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanelConsultaControloResultadosLayout.setVerticalGroup(
            jPanelConsultaControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaControloResultadosLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButtonVerNaoConformidades)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneConsultaResultadosInsectadores, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jButtonSairControloResultados))
        );

        javax.swing.GroupLayout jDialogConsultaControloResultadosLimpezasLayout = new javax.swing.GroupLayout(jDialogConsultaControloResultadosLimpezas.getContentPane());
        jDialogConsultaControloResultadosLimpezas.getContentPane().setLayout(jDialogConsultaControloResultadosLimpezasLayout);
        jDialogConsultaControloResultadosLimpezasLayout.setHorizontalGroup(
            jDialogConsultaControloResultadosLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaControloResultadosLimpezasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaControloResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogConsultaControloResultadosLimpezasLayout.setVerticalGroup(
            jDialogConsultaControloResultadosLimpezasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaControloResultadosLimpezasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaControloResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jDialogConsultaNaoConformidadesInsectocacadores.setTitle("CONSULTA NAO CONFORMIDADES DE INSECTOCAÇADORES");
        jDialogConsultaNaoConformidadesInsectocacadores.setMinimumSize(new java.awt.Dimension(934, 376));

        jTableConsultaNaoConformidadesInsectocacadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionario", "Data", "Func. Responsavel", "Medida Correct."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableConsultaNaoConformidadesInsectocacadores);

        jButtonVoltarNaoConformidades.setText("Voltar");
        jButtonVoltarNaoConformidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarNaoConformidadesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaNaoConformidadesLimpezaLayout = new javax.swing.GroupLayout(jPanelConsultaNaoConformidadesLimpeza);
        jPanelConsultaNaoConformidadesLimpeza.setLayout(jPanelConsultaNaoConformidadesLimpezaLayout);
        jPanelConsultaNaoConformidadesLimpezaLayout.setHorizontalGroup(
            jPanelConsultaNaoConformidadesLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaNaoConformidadesLimpezaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaNaoConformidadesLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaNaoConformidadesLimpezaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonVoltarNaoConformidades)))
                .addContainerGap())
        );
        jPanelConsultaNaoConformidadesLimpezaLayout.setVerticalGroup(
            jPanelConsultaNaoConformidadesLimpezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaNaoConformidadesLimpezaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonVoltarNaoConformidades)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaNaoConformidadesInsectocacadoresLayout = new javax.swing.GroupLayout(jDialogConsultaNaoConformidadesInsectocacadores.getContentPane());
        jDialogConsultaNaoConformidadesInsectocacadores.getContentPane().setLayout(jDialogConsultaNaoConformidadesInsectocacadoresLayout);
        jDialogConsultaNaoConformidadesInsectocacadoresLayout.setHorizontalGroup(
            jDialogConsultaNaoConformidadesInsectocacadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaNaoConformidadesInsectocacadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaNaoConformidadesLimpeza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialogConsultaNaoConformidadesInsectocacadoresLayout.setVerticalGroup(
            jDialogConsultaNaoConformidadesInsectocacadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaNaoConformidadesInsectocacadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaNaoConformidadesLimpeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MENU INSECTOCAÇADORES");

        jButtonEntrar.setText("Entrar");
        jButtonEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLoginInsectocadoresLayout = new javax.swing.GroupLayout(jPanelLoginInsectocadores);
        jPanelLoginInsectocadores.setLayout(jPanelLoginInsectocadoresLayout);
        jPanelLoginInsectocadoresLayout.setHorizontalGroup(
            jPanelLoginInsectocadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginInsectocadoresLayout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jButtonEntrar)
                .addContainerGap(174, Short.MAX_VALUE))
        );
        jPanelLoginInsectocadoresLayout.setVerticalGroup(
            jPanelLoginInsectocadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginInsectocadoresLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jButtonEntrar)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanelLoginInsectocadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jPanelLoginInsectocadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNomeInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeInsectoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeInsectoActionPerformed

    private void jButtonNovoInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoInsectoActionPerformed
        // BOTAO NOVO INSECTOCAÇADOR -> JANELA MENU 
        jDialogNovoInsectocacador.setLocationRelativeTo(this);
        jDialogNovoInsectocacador.setVisible(true);
        
        jButtonActualizarInsecto.setVisible(false);
        jButtonGuardarInsecto.setVisible(true);
    }//GEN-LAST:event_jButtonNovoInsectoActionPerformed

    private void jButtonEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntrarActionPerformed
        // BOTAO ENTRAR -> JANELA DE LOGIN
        jDialogMenuInsectocacadores.setLocationRelativeTo(this);
        jDialogMenuInsectocacadores.setVisible(true);
    }//GEN-LAST:event_jButtonEntrarActionPerformed

    private void jButtonSairInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairInsectoActionPerformed
        // BOTAO SAIR -> JANELA NOVO INSECTOCAÇADOR
        jDialogNovoInsectocacador.setVisible(false);
        LimpaCamposNovoInsectocador();
    }//GEN-LAST:event_jButtonSairInsectoActionPerformed

    private void jButtonSairConsultaInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairConsultaInsectoActionPerformed
        // BOTAO SAIR -> JANELA CONSULTA INSECTOCADORES
        jDialogConsultaInsectocacadores.setVisible(false);
    }//GEN-LAST:event_jButtonSairConsultaInsectoActionPerformed

    private void jButtonConsultaInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaInsectoActionPerformed
        // BOTAO CONSULTA INSECTOCACADORES -> JANELA MENU
        jDialogConsultaInsectocacadores.setLocationRelativeTo(this);
        jDialogConsultaInsectocacadores.setVisible(true);
        //cCARREGAR A TABELA
        LimpaTabelaConsultaInsectocacadores();
        ConsultaInsectocacadores();
    }//GEN-LAST:event_jButtonConsultaInsectoActionPerformed

    private void jButtonGuardarInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarInsectoActionPerformed
        // BOTAO GUARDAR -> JANELAS NOVO INSECTOCAÇADOR
        
        InserirNovoInsecto();
        LimpaCamposNovoInsectocador();
        ConsultaInsectocacadores();
    }//GEN-LAST:event_jButtonGuardarInsectoActionPerformed

    private void jButtonAddNovoInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNovoInsectoActionPerformed
        // BOTAO NOVO INSECTOCAÇADOR -> JANELAS CONSULTA INSECTOCAÇADORES
        jDialogNovoInsectocacador.setLocationRelativeTo(this);
        jDialogNovoInsectocacador.setVisible(true);
        //ESCOLHER O BOTAO QUE VAI APARECER
        jButtonActualizarInsecto.setVisible(false);
        jButtonGuardarInsecto.setVisible(true);
    }//GEN-LAST:event_jButtonAddNovoInsectoActionPerformed

    private void jButtonEditarInsectocaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarInsectocaActionPerformed
        // BOTAO EDITAR INSECTOCA -> JANELA CONSULTA INSETECTOCAÇADORES 
        int linha = jTableConsultaInsecto.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "Seleccione a Linha de um Equipamento!");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeInsecto = (String) jTableConsultaInsecto.getValueAt(linha, 1);

            idInsectocacadorSelecionado = selectId("INSECTOCACADORES", "NOME", nomeInsecto, "IDINSECTOCACADORES");

            jDialogNovoInsectocacador.setLocationRelativeTo(this);
            jDialogNovoInsectocacador.setVisible(true);
            LimpaCamposNovoInsectocador();
            ConsulInsectocaAlterar();
            
            //ESCOLHER BOTAO
            jButtonActualizarInsecto.setVisible(true);
            jButtonGuardarInsecto.setVisible(false);
            
            System.out.println("\n***BOTAO EDITAR INSECTOCAÇADOR -> JANELA CONSULTA INSECTOCAÇADOR");
            System.out.println("NOME EQUIPAMENTO SELEC.: " + nomeInsecto);
            System.out.println("ID EQUIPAMENTO SELEC.: " + idInsectocacadorSelecionado);
        
        }
        
        
    }//GEN-LAST:event_jButtonEditarInsectocaActionPerformed

    private void jButtonActualizarInsectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarInsectoActionPerformed
        // BOTAO ACTUALIZAR DADOS -> JANELA NOVO INSECTOCAÇADOR
        UpdateDadosInsectocacador();
        ConsultaInsectocacadores();
        
    }//GEN-LAST:event_jButtonActualizarInsectoActionPerformed

    private void jButtonNovaLimpezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovaLimpezaActionPerformed
        // BOTAO NOVA LIMPEZA -> JANELA CONSULTA IINSECTOCACADORES
    
        int linha = jTableConsultaInsecto.getSelectedRow();
        
        
        if (linha == -1){
            JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "Seleccione a Linha de um Insectocaçador!");
        }else{
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaInsecto.getValueAt(linha, 1);
            
            idInsectocacadorSelecionado = selectId("INSECTOCACADORES", "NOME", nomeEquipamento, "IDINSECTOCACADORES");
            
            jDialogNovaLimpeza.setLocationRelativeTo(this);
            jDialogNovaLimpeza.setVisible(true);

            ConsultaFuncionariosComboBox();
            
            System.out.println("\n***BOTAO NOVA LIMPEZA -> JANELA CONSULTA INSECTOCAÇADORES");
            System.out.println("NOME INSECTOC. SELEC.: " + nomeEquipamento );
            System.out.println("ID INSECTO SELEC.: " + idInsectocacadorSelecionado);
            
        }
        
        
    }//GEN-LAST:event_jButtonNovaLimpezaActionPerformed

    private void jButtonSairLimpezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairLimpezaActionPerformed
        // BOTAO SAIR -> JANELA NOVA LIMPEZA
        jDialogNovaLimpeza.setVisible(false);
    }//GEN-LAST:event_jButtonSairLimpezaActionPerformed

    private void jButtonGuardarLimpezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarLimpezaActionPerformed
        // BOTAO GUARDAR -> JANELA NOVA LIMPEZA
        
        //VERIFICAR SE ESTA ALGUM FUNCIONARIO SELECCIONADO
        String comboFuncio = jComboBoxFuncionarioResponsvelLimpeza.getSelectedItem().toString();
        if (comboFuncio.equals("--Funcionario--")) {
            JOptionPane.showMessageDialog(jDialogNovaLimpeza, "Seleccione um Funcionario !");
        } else {

            InserirNovaLimpeza();
            LimpaTabelaConsultaLimpezas();
            ConsultaLimpezas();
        }
    }//GEN-LAST:event_jButtonGuardarLimpezaActionPerformed

    private void jButtonConsultarLimpezasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarLimpezasActionPerformed
        //BOTAO CONSULAR LIMPEZAS -> JANELAS CONSULTA INSECTOCAÇADORES
         int linha = jTableConsultaInsecto.getSelectedRow();
        
        
        if (linha == -1){
            JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "Seleccione a Linha de um Insectocaçador!");
        }else{
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaInsecto.getValueAt(linha, 1);
            
            idInsectocacadorSelecionado = selectId("INSECTOCACADORES", "NOME", nomeEquipamento, "IDINSECTOCACADORES");      
            
            LimpaTabelaConsultaLimpezas();
            ConsultaLimpezas();
            
             if (CONTA_LINHAS_LIMPEZAS == 0) {
                    JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "Insectocaçador Ainda não contem nenhuma LIMPEZA  ! ");
                } else {
                     jDialogConsultaLimpezas.setLocationRelativeTo(this);
                     jDialogConsultaLimpezas.setVisible(true);
                }
            
            System.out.println("\n***BOTAO CONSULTA LIMPEZAS -> JANELA CONSULTA INSECTOCAÇADORES");
            System.out.println("NOME INSECTOC. SELEC.: " + nomeEquipamento );
            System.out.println("ID INSECTO SELEC.: " + idInsectocacadorSelecionado);
            
        }
    }//GEN-LAST:event_jButtonConsultarLimpezasActionPerformed

    private void jButtonNovaLimpezaConsultaLimpezasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovaLimpezaConsultaLimpezasActionPerformed
        // BOTAO NOVA LIMPEZA -> JANELA CONSULTA LIMPEZAS
        jDialogNovaLimpeza.setLocationRelativeTo(this);
        jDialogNovaLimpeza.setVisible(true);
        //CARREGAR COMBOBOX
        ConsultaFuncionariosComboBox();
        
      
        
        
    }//GEN-LAST:event_jButtonNovaLimpezaConsultaLimpezasActionPerformed

    private void jButtonSairConsultaLimpezasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairConsultaLimpezasActionPerformed
        // BOTAO SAIR -> JANELAS CONSULTA LIMPEZAS
        jDialogConsultaLimpezas.setVisible(false);
    }//GEN-LAST:event_jButtonSairConsultaLimpezasActionPerformed

    private void jButtonControloResultadosInsectocaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonControloResultadosInsectocaActionPerformed
        // BOTAO CONTROLO DE RESULTADOS -> JANELA  CONSULTA INSECTADORES
        
        int linha = jTableConsultaInsecto.getSelectedRow();
        
        
        if (linha == -1){
            JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "Seleccione a Linha de um Insectocaçador!");
        }else{
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaInsecto.getValueAt(linha, 1);
            
            idInsectocacadorSelecionado = selectId("INSECTOCACADORES", "NOME", nomeEquipamento, "IDINSECTOCACADORES");

           
            LimpaTabelaConsultaControloResultadosInsectocadores();
            ConsultaControloResultadoInsectadores();
            
            
            if (CONTA_LINHAS_CONTROLORESULTADOS == 0) {
                    JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "Insectocaçador Ainda não contem nenhuma Controlo de Resultado  ! ");
                } else {
                    jDialogConsultaControloResultadosLimpezas.setLocationRelativeTo(this);
                    jDialogConsultaControloResultadosLimpezas.setVisible(true);
                }
            
            
            System.out.println("\n***BOTAO NOVA LIMPEZA -> JANELA CONSULTA INSECTOCAÇADORES");
            System.out.println("NOME INSECTOC. SELEC.: " + nomeEquipamento );
            System.out.println("ID INSECTO SELEC.: " + idInsectocacadorSelecionado);
            
        }
        
        
        
        
       
        
        
    }//GEN-LAST:event_jButtonControloResultadosInsectocaActionPerformed

    private void jButtonSairControloResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairControloResultadosActionPerformed
        // BOTAO SAIR -> JANELA CONTROLO DE RESULTADOS
        jDialogConsultaControloResultadosLimpezas.setVisible(false);
    }//GEN-LAST:event_jButtonSairControloResultadosActionPerformed

    private void jButtonVerNaoConformidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerNaoConformidadesActionPerformed
        // BOTAO NAO CONFORMIDADES -> CONSULTA CONTROLO DE RESULTADOS
        
         int linha = jTableConsultaResultadosInsectadors.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione a Linha de um Controlo de Resultados!");
        } else {
            //VERIFICAR SE A LINHA DA TABELA  TEM RESULTADO C OU NC
            
            //NOME FUNCIOCARIO
            String nomeFuncionario = (String) jTableConsultaResultadosInsectadors.getValueAt(linha, 0);
            String resultado = (String) jTableConsultaResultadosInsectadors.getValueAt(linha, 3);


            if (resultado.equals("NC")) {


                //DEVOLVE O ID FUNCIONARIO
                idFuncionarioSelecionadoNaoConformidade = selectId("FUNCIONARIO", "NOME", nomeFuncionario, "IDFUNCIONARIO");

                //FUNÇÃO PARA CARREGAR OS DADOS PARA A TABELA
               
                ConsultaNaoConformidadesInsectocacadores(idFuncionarioSelecionadoNaoConformidade);

                if (CONTA_LINHAS_NAOCONFORMIDADES == 0) {
                    JOptionPane.showMessageDialog(jDialogConsultaControloResultadosLimpezas, "Insectocaçador Ainda não contem nenhuma Não Conformidade  ! ");
                } else {
                    jDialogConsultaNaoConformidadesInsectocacadores.setLocationRelativeTo(this);
                    jDialogConsultaNaoConformidadesInsectocacadores.setVisible(true);
                }



            } else {
                JOptionPane.showMessageDialog(jDialogConsultaControloResultadosLimpezas, "Linha Selecciona não contem Nehuma Não Conformidade ! ");
            }
            
        }
   
        
    }//GEN-LAST:event_jButtonVerNaoConformidadesActionPerformed

    private void jButtonVoltarNaoConformidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarNaoConformidadesActionPerformed
        // BOTAO VOLTAR -> JANELA NAO CONFORMIDADES
        jDialogConsultaNaoConformidadesInsectocacadores.setVisible(false);
    }//GEN-LAST:event_jButtonVoltarNaoConformidadesActionPerformed

    private void jTextFieldPesquisaInsectocacadorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldPesquisaInsectocacadorCaretUpdate
        // TEXTFIEL PESQUISA INSECTOCAÇADOR
        LimpaTabelaConsultaInsectocacadores();
        PesquisaInsectocacador();
        
    }//GEN-LAST:event_jTextFieldPesquisaInsectocacadorCaretUpdate

    
    
    
    
    
    
    /*  ************************************************* FUNÇOES **************************************** */
    
    /*  INSERIR */
    private void InserirNovoInsecto(){
        String referencia = jTextFieldReferenciaInsecto.getText();
        String nome = jTextFieldNomeInsecto.getText();
        String local = jTextFieldLocalInsecto.getText();

        if (referencia.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovoInsectocacador, "Insira a REFERENCIA do Insecto.!");
        } else if (nome.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovoInsectocacador, "Insira o NOME do Insecto.!");
        } else if (local.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovoInsectocacador, "Insira o LOCAL do Insecto.!");
        } else {

            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }
            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "INSECTOCACADORES";
                sql = "INSERT INTO " + nomeTabela + " (REFERENCIA,NOME,LOCAL)" + " VALUES(" + "'" + referencia + "'" + "," + "'" + nome + "'" + "," + "'" + local + "'" + ")";

                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                st.executeUpdate();
                st.close();
                con.close();
                
                jDialogNovoInsectocacador.setVisible(false);
                JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "DADOS INSERIDOS COM SUCESSO !");
                
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        }
        System.out.println("\n*** INSERIR NOVO INSECTOCAÇADOR -> NOVO");
        System.out.println("REFERENCIA INSECTO.: " + referencia);
        System.out.println("NOME: " + nome);
        System.out.println("LOCAL: " + local);

    }
    
    private void InserirNovaLimpeza(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        
        int idInsectocacador = idInsectocacadorSelecionado;
        int idFuncionarioResponsavel = 0;
        String data = (String) sdf.format(jDateChooserLimpeza.getDate());
        
        
        //VERIFICAR QUAL O FUNCIONARIO QUE ESTAMOS A SELECCIONAR
        String comboFuncio = jComboBoxFuncionarioResponsvelLimpeza.getSelectedItem().toString();
        if (!comboFuncio.equals("--Funcionario--")){
           try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }        
            
            try{
                con = DriverManager.getConnection(url);
                String nomeTabela = "FUNCIONARIO";
                String sql = "SELECT * FROM "+nomeTabela+" WHERE NOME='"+comboFuncio+"'";
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                
                while(rs.next()){
                    idFuncionarioResponsavel = rs.getInt("IDFUNCIONARIO");
                }
                st.close();
                con.close();
            }catch (SQLException ex){
                 System.err.println("SQLException: " + ex.getMessage());
            }
        }
        
        //INSERIR OS DADOS NA TABELA
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }
            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "LIMPEZAINSECTOCACADORES";
                sql = "INSERT INTO " + nomeTabela + "(IDINSECTOCACADORES,IDFUNCIONARIO,DATA)" + " values("+ idInsectocacador + "," +idFuncionarioResponsavel + "," + "'" + data + "'"  + ")";

                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                st.executeUpdate();
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        
            //FECHAR JANELA DE NOVA LIMPEZA
            jDialogNovaLimpeza.setVisible(false);
            
            System.out.println("\n*** INSERIR NOVA LIMPEZA -> JANELA NOVA LIMPEZA, VINDO DA CONSULTA DE INSECTOCAÇADORES");
            System.out.println("ID EQUIPAMENTO SELECIONADO: " + idInsectocacador);
            System.out.println("FUNCIOANRIO RESPONSAVEL: " + idFuncionarioResponsavel);
            System.out.println("DATA: " + data);    
        
    }

    
    /*  CONSULTAS   */
    
    private void ConsultaInsectocacadores(){
        String referencia = "";
        String nome = "";
        String local = "";
        
        LimpaTabelaConsultaInsectocacadores();
        
        model = (DefaultTableModel) jTableConsultaInsecto.getModel();
        
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }   
        
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "INSECTOCACADORES";
            String sql = "SELECT * FROM "+nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                referencia =  rs.getString("REFERENCIA");
                nome =  rs.getString("NOME");
                local =  rs.getString("LOCAL");
                
                model.addRow(new Object[]{referencia, nome, local });
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
        
    }
    
    private void ConsulInsectocaAlterar(){
        String referencia = "";
        String nome = "";
        String local = "";
                   
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }    
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "INSECTOCACADORES";
            String sql = "SELECT * FROM "+nomeTabela + " WHERE IDINSECTOCACADORES="+idInsectocacadorSelecionado;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                referencia =  rs.getString("REFERENCIA");
                nome =  rs.getString("NOME");
                local =  rs.getString("LOCAL");
                
                jTextFieldReferenciaInsecto.setText(referencia);
                jTextFieldNomeInsecto.setText(nome);
                jTextFieldLocalInsecto.setText(local);
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    
    private void ConsultaFuncionariosComboBox(){
        //LIMPAR A COMBO
        jComboBoxFuncionarioResponsvelLimpeza.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();
        
        try{   
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        
        }catch(ClassNotFoundException e){
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        
        try{
            con = DriverManager.getConnection(url);
            //            stmt = con.createStatement();
            String nomeTabela = "FUNCIONARIO";
            String sql = "select * from " +nomeTabela; 
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();
            
        }catch(SQLException ex){
            System.err.println("SQLException: " + ex.getMessage()); 
        }
        
        jComboBoxFuncionarioResponsvelLimpeza.addItem("--Funcionario--");
        Iterator<String> it = opcao.iterator();
        while(it.hasNext()){
            jComboBoxFuncionarioResponsvelLimpeza.addItem(it.next());
        }
    }
    
    private void ConsultaLimpezas(){
        int idInsectocacador = 0;
        String nomeInsectocacador = "";
        int idFuncionario = 0;
        String nomeFuncionario = "";
        String data = "";
        
        model  = (DefaultTableModel) jTableConsultaLimpezas.getModel();
        CONTA_LINHAS_LIMPEZAS = 0;
        
         try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }    
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "LIMPEZAINSECTOCACADORES";
            String sql = "SELECT * FROM "+nomeTabela + " WHERE IDINSECTOCACADORES="+idInsectocacadorSelecionado;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                 idInsectocacador = rs.getInt("IDINSECTOCACADORES");
                 nomeInsectocacador = selectString("INSECTOCACADORES", "IDINSECTOCACADORES", idInsectocacador, "NOME");
                
                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");
                
                data =  rs.getString("DATA");
               
                model.addRow(new Object[]{nomeInsectocacador, nomeFuncionario, data,});
                CONTA_LINHAS_LIMPEZAS++;
            }
            
          
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
        
        
    }
    
    private void ConsultaControloResultadoInsectadores(){
        //DADOS QUE VAMOS LER DA BD
        int idControResultado = 0;
        int idFuncionario = 0;
        String nomeFuncionario = "";
        
        int idInsectocacador = idInsectocacadorSelecionado;
        String nomeInsectador = "";
        
        String data = "";
        String resultado = "NC";
        String fichaTecnica = "";
        String descricao = "";
        
        
        model = (DefaultTableModel) jTableConsultaResultadosInsectadors.getModel();
        CONTA_LINHAS_CONTROLORESULTADOS = 0;
        
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }      
        
       try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "SELECT * FROM "+nomeTabela + " WHERE IDINSECTOCACADORES="+idInsectocacador;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");
                
                idInsectocacador = rs.getInt("IDINSECTOCACADORES");
                nomeInsectador = selectString("INSECTOCACADORES", "IDINSECTOCACADORES", idInsectocacador, "NOME");
                
                data =  rs.getString("DATA");
                resultado =  rs.getString("RESULTADO");
                fichaTecnica = rs.getString("FICHATECNICA");
                descricao =  rs.getString("DESCRICAO");
                
                model.addRow(new Object[]{nomeFuncionario, nomeInsectador, data, resultado, fichaTecnica, descricao});
                CONTA_LINHAS_CONTROLORESULTADOS++;
            }
            
          
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
        
    }
    
    private void ConsultaNaoConformidadesInsectocacadores(int idFuncionarioSelecionado){
        //DADOS DA TABELA
        int funcionario = idFuncionarioSelecionado;
        
        int idFuncionario = 0;
        String nomefuncionario = "";
        String dataNaoConform = "";
        String ocorrencia = "";
        String medidaCorrecti ="";
        String resultado = "NC";
        String correctiva = "N";
        int idFuncionarioResponsavel = 0;
        String nomeFuncionarioResponsavel ="";
        
        model = (DefaultTableModel) jTableConsultaNaoConformidadesInsectocacadores.getModel();
        CONTA_LINHAS_NAOCONFORMIDADES = 0;
        
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }     
        
         try{         
            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "select * from "+nomeTabela+" where IDFUNCIONARIO="+funcionario +"and RESULTADO="+"'"+ resultado +"'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
                   
            while(rs.next()){
                idControloResuladoSeleccionado = rs.getInt("IDCONTRESULTADOS");
                System.out.println("IDCONTROLORESULTADO Pesquisar -> " + idControloResuladoSeleccionado); 
                 //VARIVAEL GLOBAL
            
                //ESCREVER NA TABELA A PESQUISA
                String nomeTabela2 = "NAOCONFORMIDADES";
                String sql2 = "select * from "+nomeTabela2+" where IDCONTRESULTADOS="+idControloResuladoSeleccionado+" and CORRECTIVA='"  + correctiva + "'";
                PreparedStatement st2 = (PreparedStatement) con.prepareStatement(sql2);
                ResultSet rs2 = st2.executeQuery();
                
                while(rs2.next()){
                    
                    //idNaoConformidade = rs2.getInt("IDNAOCONF");
                    //idContResultado = rs2.getInt("IDCONTRESULTADOS");
                    
                    idFuncionario = rs2.getInt("IDFUNCIONARIO");
                    nomefuncionario = selectString("FUNCIONARIO","IDFUNCIONARIO",idFuncionario,"NOME"); 
                    
                    dataNaoConform = rs2.getString("DATANAOCONFORMIDADE");
                    ocorrencia = rs2.getString("OCORRENCIA");
                    medidaCorrecti = rs2.getString("MEDIDACORRECTIVA");
                    
                    idFuncionarioResponsavel = rs2.getInt("IDFUNCIONARIOMEDIDACORRECTIVA");
                    nomeFuncionarioResponsavel = selectString("FUNCIONARIO","IDFUNCIONARIO",idFuncionarioResponsavel,"NOME"); 
                    
                    model.addRow(new Object[]{nomefuncionario, dataNaoConform, ocorrencia, nomeFuncionarioResponsavel, medidaCorrecti});
                    
                    //contaNaoConformidade_MedidasCorrectivas++;
                    //idContResultadosUltimo = idContResultado;
                    CONTA_LINHAS_NAOCONFORMIDADES++;
                }
                st2.close();               
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        } 
        
        
        
        
    }
   
   
    /*  PESQUISAR   */
    private void PesquisaInsectocacador(){
        // DADOS A EPSQUISAR
        String referencia = "";
        String nome = "";
        String local = "";
        
        String pesquisa = jTextFieldPesquisaInsectocacador.getText();
        
        model = (DefaultTableModel) jTableConsultaInsecto.getModel();
        
          try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        }catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado."); 
        }
          
          
        try{
            con = DriverManager.getConnection(url);
            String nomeTabela = "INSECTOCACADORES";
            sql = "select * from "+ nomeTabela+" where REFERENCIA like '"+pesquisa+ "%'" + "or NOME like '" + pesquisa+"%'" + "or LOCAL like '" +pesquisa + "%'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()){
                referencia = rs.getString("REFERENCIA");
                nome = rs.getString("NOME");
                local = rs.getString("LOCAL");
               
                //guardar dados num arraylist e adicionalos a tabela
                model.addRow(new Object[]{referencia, nome, local});
            }
            st.close();
            con.close();
        }catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
        
    }
    
    /*  UPDATE  */
    private void UpdateDadosInsectocacador(){
        
        String referencia = jTextFieldReferenciaInsecto.getText();
        String nome = jTextFieldNomeInsecto.getText();
        String local = jTextFieldLocalInsecto.getText();

        if (referencia.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovoInsectocacador, "Insira a REFERENCIA do Insecto.!");
        } else if (nome.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovoInsectocacador, "Insira o NOME do Insecto.!");
        } else if (local.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovoInsectocacador, "Insira o LOCAL do Insecto.!");
        } else {

            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "INSECTOCACADORES";
                String sql = "UPDATE " + nomeTabela + " SET REFERENCIA='" + referencia + "'" + "," + " NOME='" + nome + "'" + "," + " LOCAL='" + local + "' WHERE IDINSECTOCACADORES=" + idInsectocacadorSelecionado;
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                st.executeUpdate();

                st.close();
                con.close();
                
                jDialogNovoInsectocacador.setVisible(false);
                JOptionPane.showMessageDialog(jDialogConsultaInsectocacadores, "DADOS ALTERADOS COM SUCESSO !");
            
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        }
        System.out.println("\n** ACTUALIZA INTECOÇADOR SELECIONADO");
        System.out.println("REFERENCIA: " + referencia);
        System.out.println("NOME: " + nome);
        System.out.println("LOCAL: " + local);
        

    }

    
    /*  LIMPAR  */
    
    private void LimpaCamposNovoInsectocador(){
        jTextFieldLocalInsecto.setText("");
        jTextFieldNomeInsecto.setText("");
        jTextFieldReferenciaInsecto.setText("");
    }
    
    private void LimpaTabelaConsultaInsectocacadores(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaInsecto.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    private void LimpaTabelaConsultaLimpezas(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaLimpezas.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    private void LimpaTabelaConsultaControloResultadosInsectocadores(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaResultadosInsectadors.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    private void LimpaTabelaNaoConformidadesInsectocacadores(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaNaoConformidadesInsectocacadores.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    /*   FUNÇAO PARA LER OS CAMPO DE UMA TABELAS */
    private int selectId(String tab, String col, String cam, String colId){
        int resultId = 0;
        String tabela = tab;
        String coluna = col;
        String campo = cam;
        String colunaId = colId;
        
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }                
            try {
                con = DriverManager.getConnection(url);
                sql = "select * from "+ tabela+ " where "+coluna+"='"+campo+"'";
                
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    resultId = rs.getInt(colunaId);
                }
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        return resultId;
    }
    
    private String selectString(String tab, String col, int cam, String colNome){
        String resultString = "";
        String tabela = tab;
        String coluna = col;
        int campo = cam;
        String colunaNome = colNome;
        
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }                
            try {
                con = DriverManager.getConnection(url);
                sql = "select * from "+ tabela+ " where "+coluna+"="+campo+" ";
                
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    resultString = rs.getString(colunaNome);
                }
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
            
        return resultString;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Insectocadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Insectocadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Insectocadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Insectocadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Insectocadores().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizarInsecto;
    private javax.swing.JButton jButtonAddNovoInsecto;
    private javax.swing.JButton jButtonConsultaInsecto;
    private javax.swing.JButton jButtonConsultarLimpezas;
    private javax.swing.JButton jButtonControloResultadosInsectoca;
    private javax.swing.JButton jButtonEditarInsectoca;
    private javax.swing.JButton jButtonEntrar;
    private javax.swing.JButton jButtonGuardarInsecto;
    private javax.swing.JButton jButtonGuardarLimpeza;
    private javax.swing.JButton jButtonNovaLimpeza;
    private javax.swing.JButton jButtonNovaLimpezaConsultaLimpezas;
    private javax.swing.JButton jButtonNovoInsecto;
    private javax.swing.JButton jButtonSairConsultaInsecto;
    private javax.swing.JButton jButtonSairConsultaLimpezas;
    private javax.swing.JButton jButtonSairControloResultados;
    private javax.swing.JButton jButtonSairInsecto;
    private javax.swing.JButton jButtonSairLimpeza;
    private javax.swing.JButton jButtonVerNaoConformidades;
    private javax.swing.JButton jButtonVoltarNaoConformidades;
    private javax.swing.JComboBox jComboBoxFuncionarioResponsvelLimpeza;
    private com.toedter.calendar.JDateChooser jDateChooserLimpeza;
    private javax.swing.JDialog jDialogConsultaControloResultadosLimpezas;
    private javax.swing.JDialog jDialogConsultaInsectocacadores;
    private javax.swing.JDialog jDialogConsultaLimpezas;
    private javax.swing.JDialog jDialogConsultaNaoConformidadesInsectocacadores;
    private javax.swing.JDialog jDialogMenuInsectocacadores;
    private javax.swing.JDialog jDialogNovaLimpeza;
    private javax.swing.JDialog jDialogNovoInsectocacador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelFuncionarioResponsavel;
    private javax.swing.JLabel jLabelLocal;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelPesquisarInsectocacador;
    private javax.swing.JLabel jLabelReferencia;
    private javax.swing.JPanel jPanelConsultaControloResultados;
    private javax.swing.JPanel jPanelConsultaInsecto;
    private javax.swing.JPanel jPanelConsultaLimpezas;
    private javax.swing.JPanel jPanelConsultaNaoConformidadesLimpeza;
    private javax.swing.JPanel jPanelLoginInsectocadores;
    private javax.swing.JPanel jPanelMenuInsectocadores;
    private javax.swing.JPanel jPanelNovaLimpeza;
    private javax.swing.JPanel jPanelNovoInsectocacador;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneConsultInsecto;
    private javax.swing.JScrollPane jScrollPaneConsultaLimpezas;
    private javax.swing.JScrollPane jScrollPaneConsultaResultadosInsectadores;
    private javax.swing.JTable jTableConsultaInsecto;
    private javax.swing.JTable jTableConsultaLimpezas;
    private javax.swing.JTable jTableConsultaNaoConformidadesInsectocacadores;
    private javax.swing.JTable jTableConsultaResultadosInsectadors;
    private javax.swing.JTextField jTextFieldLocalInsecto;
    private javax.swing.JTextField jTextFieldNomeInsecto;
    private javax.swing.JTextField jTextFieldPesquisaInsectocacador;
    private javax.swing.JTextField jTextFieldReferenciaInsecto;
    // End of variables declaration//GEN-END:variables
}
