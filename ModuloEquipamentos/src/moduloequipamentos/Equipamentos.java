/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduloequipamentos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rafael
 */
public class Equipamentos extends javax.swing.JFrame {

    /* VARIAVEIS PARA A LIGAÇÃO A BASE DE DADOS */
    String url = "jdbc:derby://localhost:1527/equipamentos";
    Connection con;
    String sql;
    
    DefaultTableModel model;
    
    /*  VARIVAVEL PARA GUARDAR O IDEQUIPAMENTO QUANDO SELECCIONAMOS UMA LINHA *
     * DA TABELA CONSULTA EQUIPAMENTO */
    int idEquipamentoSelecionado = 0;
    
    /* VARIVAEL PARA GUARDAR O ID DO FUNCIONARIO REFERENTE A NAO CONFORMIDADE*/
    int idFuncionarioSelecionadoNaoConformidade = 0;
    int idControloResultadosID = 0; 
    
    /*VARIVAEL PARA CONTAR OS REGISTO DE UMA TABELA*/
     int CONTA_LINHAS_CONTROLORESULTADOS = 0;
     int CONTA_LINAS_NAOCONFORMIDADES = 0;
     int CONTA_LINHAS_MANUTENCAO = 0;
    
    /**
     * Creates new form Equipamentos
     */
    public Equipamentos() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogMenuEquipamentos = new javax.swing.JDialog();
        jPanelMenuEquipamentos = new javax.swing.JPanel();
        jButtonAddNovoEquipa = new javax.swing.JButton();
        jButtonConsultaEquipamentos = new javax.swing.JButton();
        jDialogNovoEquipamento = new javax.swing.JDialog();
        jPanelNovoEquipamento = new javax.swing.JPanel();
        jLabelNovoEquipametno = new javax.swing.JLabel();
        jLabelNome = new javax.swing.JLabel();
        jLabelDescrição = new javax.swing.JLabel();
        jTextFieldNomeEquipamento = new javax.swing.JTextField();
        jScrollPaneNovoEquipmanentoObservacao = new javax.swing.JScrollPane();
        jTextAreaObservacaoNovoEquipamento = new javax.swing.JTextArea();
        jButtonGuardarEquipametno = new javax.swing.JButton();
        jButtonSairNovoEquipamento = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jDialogConsultaEquipamentos = new javax.swing.JDialog();
        jPanelConsultaEquipamentos = new javax.swing.JPanel();
        jScrollPaneConsultaEquipamentos = new javax.swing.JScrollPane();
        jTableConsultaEquipamentos = new javax.swing.JTable();
        jButtonNovoEquipamento = new javax.swing.JButton();
        jButtonSairConsultaEquipamentos = new javax.swing.JButton();
        jButtonManutencaoConsultaEquipamentos = new javax.swing.JButton();
        jButtonControloResultados = new javax.swing.JButton();
        jButtonEditarEquipamento = new javax.swing.JButton();
        jButtonConsultaManutencao = new javax.swing.JButton();
        jTextFieldPesquisaEquipamento = new javax.swing.JTextField();
        jLabelPesquisarEquipamento = new javax.swing.JLabel();
        jDialogNovaManutencaoEquipamento = new javax.swing.JDialog();
        jPanelManutencaoEquipamento = new javax.swing.JPanel();
        jLabelManutencaoEquipametno = new javax.swing.JLabel();
        jLabelData = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooserDataManutencaoEquipamento = new com.toedter.calendar.JDateChooser();
        jScrollPaneObservacaManuetencaoEquipametno = new javax.swing.JScrollPane();
        jTextAreaObservacaoManutencaoEquipameto = new javax.swing.JTextArea();
        jButtonGravarManutencaoEquipametno = new javax.swing.JButton();
        jButtonSairManutencaoEquipamento = new javax.swing.JButton();
        jLabelFuncionarioResponsavel = new javax.swing.JLabel();
        jComboBoxFuncionarioResponsavel = new javax.swing.JComboBox();
        jDialogConsultaManutencaoEquipamentos = new javax.swing.JDialog();
        jPanelConsultaManutencaoEquipamentos = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPaneConsultaManutencaoEquipamentos = new javax.swing.JScrollPane();
        jTableConsultaManutencaoEquipamentos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jDialogConsultaControloResultadosEquipamento = new javax.swing.JDialog();
        jPanelControloResultados = new javax.swing.JPanel();
        jScrollPaneConsultaControloResultados = new javax.swing.JScrollPane();
        jTableConsultaControloResultado = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButtonSairControloResultado = new javax.swing.JButton();
        jButtonVerNaoConformidadesEquipamento = new javax.swing.JButton();
        jDialogConsultaNaoConformidades = new javax.swing.JDialog();
        jPanelNaoConformidades = new javax.swing.JPanel();
        jScrollPaneNaoConformidades = new javax.swing.JScrollPane();
        jTableNaoConformidadesEquipamento = new javax.swing.JTable();
        jButtonSairNaoConformidades = new javax.swing.JButton();
        jButtonEntrarEquipamentos = new javax.swing.JButton();

        jDialogMenuEquipamentos.setTitle("EQUIPAMENTOS");
        jDialogMenuEquipamentos.setMinimumSize(new java.awt.Dimension(388, 186));

        jButtonAddNovoEquipa.setText("Adicionar Novo");
        jButtonAddNovoEquipa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNovoEquipaActionPerformed(evt);
            }
        });

        jButtonConsultaEquipamentos.setText("Consultar Equip.");
        jButtonConsultaEquipamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaEquipamentosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenuEquipamentosLayout = new javax.swing.GroupLayout(jPanelMenuEquipamentos);
        jPanelMenuEquipamentos.setLayout(jPanelMenuEquipamentosLayout);
        jPanelMenuEquipamentosLayout.setHorizontalGroup(
            jPanelMenuEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuEquipamentosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButtonAddNovoEquipa)
                .addGap(18, 18, 18)
                .addComponent(jButtonConsultaEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanelMenuEquipamentosLayout.setVerticalGroup(
            jPanelMenuEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuEquipamentosLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelMenuEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddNovoEquipa)
                    .addComponent(jButtonConsultaEquipamentos))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogMenuEquipamentosLayout = new javax.swing.GroupLayout(jDialogMenuEquipamentos.getContentPane());
        jDialogMenuEquipamentos.getContentPane().setLayout(jDialogMenuEquipamentosLayout);
        jDialogMenuEquipamentosLayout.setHorizontalGroup(
            jDialogMenuEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogMenuEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelMenuEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jDialogMenuEquipamentosLayout.setVerticalGroup(
            jDialogMenuEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogMenuEquipamentosLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanelMenuEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jDialogNovoEquipamento.setTitle("Novo Equipamento");
        jDialogNovoEquipamento.setMinimumSize(new java.awt.Dimension(460, 339));

        jLabelNovoEquipametno.setText("Novo Equipamento");

        jLabelNome.setText("Nome");

        jLabelDescrição.setText("Descrição");

        jTextAreaObservacaoNovoEquipamento.setColumns(20);
        jTextAreaObservacaoNovoEquipamento.setRows(5);
        jScrollPaneNovoEquipmanentoObservacao.setViewportView(jTextAreaObservacaoNovoEquipamento);

        jButtonGuardarEquipametno.setText("Guardar");
        jButtonGuardarEquipametno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarEquipametnoActionPerformed(evt);
            }
        });

        jButtonSairNovoEquipamento.setText("Sair");
        jButtonSairNovoEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairNovoEquipamentoActionPerformed(evt);
            }
        });

        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNovoEquipamentoLayout = new javax.swing.GroupLayout(jPanelNovoEquipamento);
        jPanelNovoEquipamento.setLayout(jPanelNovoEquipamentoLayout);
        jPanelNovoEquipamentoLayout.setHorizontalGroup(
            jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoEquipamentoLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNovoEquipametno)
                    .addGroup(jPanelNovoEquipamentoLayout.createSequentialGroup()
                        .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNome)
                            .addComponent(jLabelDescrição))
                        .addGap(21, 21, 21)
                        .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelNovoEquipamentoLayout.createSequentialGroup()
                                .addComponent(jButtonGuardarEquipametno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonActualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSairNovoEquipamento))
                            .addComponent(jScrollPaneNovoEquipmanentoObservacao, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextFieldNomeEquipamento))))
                .addContainerGap())
        );
        jPanelNovoEquipamentoLayout.setVerticalGroup(
            jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNovoEquipametno)
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNome)
                    .addComponent(jTextFieldNomeEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDescrição)
                    .addComponent(jScrollPaneNovoEquipmanentoObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonGuardarEquipametno)
                        .addComponent(jButtonActualizar))
                    .addComponent(jButtonSairNovoEquipamento))
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialogNovoEquipamentoLayout = new javax.swing.GroupLayout(jDialogNovoEquipamento.getContentPane());
        jDialogNovoEquipamento.getContentPane().setLayout(jDialogNovoEquipamentoLayout);
        jDialogNovoEquipamentoLayout.setHorizontalGroup(
            jDialogNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovoEquipamentoLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jPanelNovoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jDialogNovoEquipamentoLayout.setVerticalGroup(
            jDialogNovoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovoEquipamentoLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanelNovoEquipamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );

        jDialogConsultaEquipamentos.setTitle("CONSULTA EQUIPAMENTOS");
        jDialogConsultaEquipamentos.setMinimumSize(new java.awt.Dimension(667, 376));

        jTableConsultaEquipamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Observação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneConsultaEquipamentos.setViewportView(jTableConsultaEquipamentos);

        jButtonNovoEquipamento.setText("Novo Equipamento");
        jButtonNovoEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoEquipamentoActionPerformed(evt);
            }
        });

        jButtonSairConsultaEquipamentos.setText("Sair");
        jButtonSairConsultaEquipamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairConsultaEquipamentosActionPerformed(evt);
            }
        });

        jButtonManutencaoConsultaEquipamentos.setText("Nova Manutenção");
        jButtonManutencaoConsultaEquipamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManutencaoConsultaEquipamentosActionPerformed(evt);
            }
        });

        jButtonControloResultados.setText("Controlo de Resultados");
        jButtonControloResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonControloResultadosActionPerformed(evt);
            }
        });

        jButtonEditarEquipamento.setText("Editar Equipamento");
        jButtonEditarEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarEquipamentoActionPerformed(evt);
            }
        });

        jButtonConsultaManutencao.setText("Consulta Manutenção");
        jButtonConsultaManutencao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaManutencaoActionPerformed(evt);
            }
        });

        jTextFieldPesquisaEquipamento.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldPesquisaEquipamentoCaretUpdate(evt);
            }
        });

        jLabelPesquisarEquipamento.setText("Pesquisar");

        javax.swing.GroupLayout jPanelConsultaEquipamentosLayout = new javax.swing.GroupLayout(jPanelConsultaEquipamentos);
        jPanelConsultaEquipamentos.setLayout(jPanelConsultaEquipamentosLayout);
        jPanelConsultaEquipamentosLayout.setHorizontalGroup(
            jPanelConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConsultaEquipamentosLayout.createSequentialGroup()
                        .addGroup(jPanelConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelConsultaEquipamentosLayout.createSequentialGroup()
                                .addComponent(jButtonNovoEquipamento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonManutencaoConsultaEquipamentos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonEditarEquipamento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSairConsultaEquipamentos))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsultaEquipamentosLayout.createSequentialGroup()
                                .addComponent(jTextFieldPesquisaEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonConsultaManutencao)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonControloResultados))
                            .addComponent(jScrollPaneConsultaEquipamentos, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE))
                        .addGap(41, 41, 41))
                    .addGroup(jPanelConsultaEquipamentosLayout.createSequentialGroup()
                        .addComponent(jLabelPesquisarEquipamento)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelConsultaEquipamentosLayout.setVerticalGroup(
            jPanelConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelPesquisarEquipamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonControloResultados)
                    .addComponent(jButtonConsultaManutencao)
                    .addComponent(jTextFieldPesquisaEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneConsultaEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovoEquipamento)
                    .addComponent(jButtonSairConsultaEquipamentos)
                    .addComponent(jButtonManutencaoConsultaEquipamentos)
                    .addComponent(jButtonEditarEquipamento))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaEquipamentosLayout = new javax.swing.GroupLayout(jDialogConsultaEquipamentos.getContentPane());
        jDialogConsultaEquipamentos.getContentPane().setLayout(jDialogConsultaEquipamentosLayout);
        jDialogConsultaEquipamentosLayout.setHorizontalGroup(
            jDialogConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaEquipamentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialogConsultaEquipamentosLayout.setVerticalGroup(
            jDialogConsultaEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jDialogNovaManutencaoEquipamento.setTitle("NOVA MANUTENCAO DE EQUIPAMENTO");
        jDialogNovaManutencaoEquipamento.setMinimumSize(new java.awt.Dimension(355, 476));

        jLabelManutencaoEquipametno.setText("Manutenção Equipamento");

        jLabelData.setText("Data");

        jLabel1.setText("Observações");

        jLabel2.setText("Ficha Tecnica");

        jDateChooserDataManutencaoEquipamento.setDate(new java.util.Date(1383072388000L));
        jDateChooserDataManutencaoEquipamento.setDateFormatString("yyyy-MM-dd");
        jDateChooserDataManutencaoEquipamento.setEnabled(false);

        jTextAreaObservacaoManutencaoEquipameto.setColumns(20);
        jTextAreaObservacaoManutencaoEquipameto.setRows(5);
        jScrollPaneObservacaManuetencaoEquipametno.setViewportView(jTextAreaObservacaoManutencaoEquipameto);

        jButtonGravarManutencaoEquipametno.setText("Guardar");
        jButtonGravarManutencaoEquipametno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarManutencaoEquipametnoActionPerformed(evt);
            }
        });

        jButtonSairManutencaoEquipamento.setText("Sair");
        jButtonSairManutencaoEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairManutencaoEquipamentoActionPerformed(evt);
            }
        });

        jLabelFuncionarioResponsavel.setText("Funcionario Responsavel");

        javax.swing.GroupLayout jPanelManutencaoEquipamentoLayout = new javax.swing.GroupLayout(jPanelManutencaoEquipamento);
        jPanelManutencaoEquipamento.setLayout(jPanelManutencaoEquipamentoLayout);
        jPanelManutencaoEquipamentoLayout.setHorizontalGroup(
            jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutencaoEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelManutencaoEquipametno)
                    .addComponent(jLabel2)
                    .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelManutencaoEquipamentoLayout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jButtonGravarManutencaoEquipametno)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSairManutencaoEquipamento))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelManutencaoEquipamentoLayout.createSequentialGroup()
                            .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabelData))
                            .addGap(10, 10, 10)
                            .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jDateChooserDataManutencaoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPaneObservacaManuetencaoEquipametno, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxFuncionarioResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabelFuncionarioResponsavel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelManutencaoEquipamentoLayout.setVerticalGroup(
            jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManutencaoEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelManutencaoEquipametno)
                .addGap(28, 28, 28)
                .addComponent(jLabelFuncionarioResponsavel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxFuncionarioResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelData)
                    .addComponent(jDateChooserDataManutencaoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelManutencaoEquipamentoLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(jPanelManutencaoEquipamentoLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPaneObservacaManuetencaoEquipametno, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(50, 50, 50)
                .addGroup(jPanelManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGravarManutencaoEquipametno)
                    .addComponent(jButtonSairManutencaoEquipamento))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogNovaManutencaoEquipamentoLayout = new javax.swing.GroupLayout(jDialogNovaManutencaoEquipamento.getContentPane());
        jDialogNovaManutencaoEquipamento.getContentPane().setLayout(jDialogNovaManutencaoEquipamentoLayout);
        jDialogNovaManutencaoEquipamentoLayout.setHorizontalGroup(
            jDialogNovaManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaManutencaoEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelManutencaoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jDialogNovaManutencaoEquipamentoLayout.setVerticalGroup(
            jDialogNovaManutencaoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogNovaManutencaoEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelManutencaoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jDialogConsultaManutencaoEquipamentos.setTitle("CONSULTA MANUTENÇÃO DE EQUIPAMENTOS");
        jDialogConsultaManutencaoEquipamentos.setMinimumSize(new java.awt.Dimension(673, 351));

        jPanelConsultaManutencaoEquipamentos.setMinimumSize(new java.awt.Dimension(642, 302));

        jLabel3.setText("Consulta Manutenção de Equipamentos");

        jTableConsultaManutencaoEquipamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Equipamento", "Data", "Observações", "Ficha Tecnica"
            }
        ));
        jScrollPaneConsultaManutencaoEquipamentos.setViewportView(jTableConsultaManutencaoEquipamentos);

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaManutencaoEquipamentosLayout = new javax.swing.GroupLayout(jPanelConsultaManutencaoEquipamentos);
        jPanelConsultaManutencaoEquipamentos.setLayout(jPanelConsultaManutencaoEquipamentosLayout);
        jPanelConsultaManutencaoEquipamentosLayout.setHorizontalGroup(
            jPanelConsultaManutencaoEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaManutencaoEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsultaManutencaoEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPaneConsultaManutencaoEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelConsultaManutencaoEquipamentosLayout.setVerticalGroup(
            jPanelConsultaManutencaoEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaManutencaoEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(42, 42, 42)
                .addComponent(jScrollPaneConsultaManutencaoEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaManutencaoEquipamentosLayout = new javax.swing.GroupLayout(jDialogConsultaManutencaoEquipamentos.getContentPane());
        jDialogConsultaManutencaoEquipamentos.getContentPane().setLayout(jDialogConsultaManutencaoEquipamentosLayout);
        jDialogConsultaManutencaoEquipamentosLayout.setHorizontalGroup(
            jDialogConsultaManutencaoEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaManutencaoEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaManutencaoEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jDialogConsultaManutencaoEquipamentosLayout.setVerticalGroup(
            jDialogConsultaManutencaoEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaManutencaoEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelConsultaManutencaoEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jDialogConsultaControloResultadosEquipamento.setTitle("CONSULTA CONTROLO DE RESULTADOS ");
        jDialogConsultaControloResultadosEquipamento.setMinimumSize(new java.awt.Dimension(922, 305));

        jTableConsultaControloResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionario", "Equipamento", "Data", "Resultado", "Ficha tecnica", "Descricao"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneConsultaControloResultados.setViewportView(jTableConsultaControloResultado);

        jLabel4.setText("Consulta Controlo de Resultados ");

        jButtonSairControloResultado.setText("Sair");
        jButtonSairControloResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairControloResultadoActionPerformed(evt);
            }
        });

        jButtonVerNaoConformidadesEquipamento.setText("VER NAO CONFORMIDADE DO EQUIPAMENTO");
        jButtonVerNaoConformidadesEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerNaoConformidadesEquipamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelControloResultadosLayout = new javax.swing.GroupLayout(jPanelControloResultados);
        jPanelControloResultados.setLayout(jPanelControloResultadosLayout);
        jPanelControloResultadosLayout.setHorizontalGroup(
            jPanelControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControloResultadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneConsultaControloResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
                    .addGroup(jPanelControloResultadosLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonVerNaoConformidadesEquipamento))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControloResultadosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSairControloResultado)))
                .addContainerGap())
        );
        jPanelControloResultadosLayout.setVerticalGroup(
            jPanelControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControloResultadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelControloResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButtonVerNaoConformidadesEquipamento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneConsultaControloResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSairControloResultado)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaControloResultadosEquipamentoLayout = new javax.swing.GroupLayout(jDialogConsultaControloResultadosEquipamento.getContentPane());
        jDialogConsultaControloResultadosEquipamento.getContentPane().setLayout(jDialogConsultaControloResultadosEquipamentoLayout);
        jDialogConsultaControloResultadosEquipamentoLayout.setHorizontalGroup(
            jDialogConsultaControloResultadosEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaControloResultadosEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelControloResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jDialogConsultaControloResultadosEquipamentoLayout.setVerticalGroup(
            jDialogConsultaControloResultadosEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaControloResultadosEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelControloResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jDialogConsultaNaoConformidades.setTitle("CONSULTA NÃO CONFORMIDADES");
        jDialogConsultaNaoConformidades.setMinimumSize(new java.awt.Dimension(965, 318));

        jTableNaoConformidadesEquipamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Funcionario", "Data", "Ocorrencia", "Funcionario Responsavel", "Medida Correct."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneNaoConformidades.setViewportView(jTableNaoConformidadesEquipamento);

        jButtonSairNaoConformidades.setText("Voltar");
        jButtonSairNaoConformidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairNaoConformidadesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNaoConformidadesLayout = new javax.swing.GroupLayout(jPanelNaoConformidades);
        jPanelNaoConformidades.setLayout(jPanelNaoConformidadesLayout);
        jPanelNaoConformidadesLayout.setHorizontalGroup(
            jPanelNaoConformidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNaoConformidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNaoConformidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneNaoConformidades, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNaoConformidadesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSairNaoConformidades)))
                .addContainerGap())
        );
        jPanelNaoConformidadesLayout.setVerticalGroup(
            jPanelNaoConformidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNaoConformidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneNaoConformidades, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSairNaoConformidades)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogConsultaNaoConformidadesLayout = new javax.swing.GroupLayout(jDialogConsultaNaoConformidades.getContentPane());
        jDialogConsultaNaoConformidades.getContentPane().setLayout(jDialogConsultaNaoConformidadesLayout);
        jDialogConsultaNaoConformidadesLayout.setHorizontalGroup(
            jDialogConsultaNaoConformidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaNaoConformidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNaoConformidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jDialogConsultaNaoConformidadesLayout.setVerticalGroup(
            jDialogConsultaNaoConformidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultaNaoConformidadesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanelNaoConformidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" MODULO EQUIPAMETNOS");

        jButtonEntrarEquipamentos.setText("Entrar Equipamentos");
        jButtonEntrarEquipamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEntrarEquipamentosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addComponent(jButtonEntrarEquipamentos)
                .addContainerGap(205, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(jButtonEntrarEquipamentos)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEntrarEquipamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEntrarEquipamentosActionPerformed
        // MOSTRAR JDIALOG DOS EQUIPAMENTOS
        jDialogMenuEquipamentos.setLocationRelativeTo(this);
        jDialogMenuEquipamentos.setVisible(true);
    }//GEN-LAST:event_jButtonEntrarEquipamentosActionPerformed

    private void jButtonAddNovoEquipaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNovoEquipaActionPerformed
        // ADICIONAR NOVO EQUIPAMENTO
        jButtonActualizar.setVisible(false);
        jButtonGuardarEquipametno.setVisible(true);
        jDialogNovoEquipamento.setLocationRelativeTo(this);
        jDialogNovoEquipamento.setVisible(true);
    }//GEN-LAST:event_jButtonAddNovoEquipaActionPerformed

    private void jButtonSairNovoEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairNovoEquipamentoActionPerformed
        //BOTAO SAIR NOVO EQUIPAMENTO
        //LIMPAR OS CAMPOS
       LimpaCamposNovoEquipamento();
        jDialogNovoEquipamento.setVisible(false);
    }//GEN-LAST:event_jButtonSairNovoEquipamentoActionPerformed

    private void jButtonGuardarEquipametnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarEquipametnoActionPerformed
        // BOTAO GUARDA NOVO EQUIPAMENTO            
        String nome = jTextFieldNomeEquipamento.getText();

        if (nome.equals("")) {
            JOptionPane.showMessageDialog(jDialogNovaManutencaoEquipamento, "Introduza o Nome do Equipamento!");
        } else {
            InserirNovoEquipamento();
            LimpaCamposNovoEquipamento();
            jDialogNovoEquipamento.setVisible(false);
            
            LimpaTabelaConsultaEquipamentos();
            ConsultaEquipamentos();
            jDialogConsultaEquipamentos.setLocationRelativeTo(this);
            jDialogConsultaEquipamentos.setVisible(true);
            
        }
    }//GEN-LAST:event_jButtonGuardarEquipametnoActionPerformed

    private void jButtonConsultaEquipamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaEquipamentosActionPerformed
        // CONSULTAR EQUIPAMENTOS
        LimpaTabelaConsultaEquipamentos();
        ConsultaEquipamentos();
        jDialogConsultaEquipamentos.setLocationRelativeTo(this);
        jDialogConsultaEquipamentos.setVisible(true);
        
    }//GEN-LAST:event_jButtonConsultaEquipamentosActionPerformed

    private void jButtonNovoEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoEquipamentoActionPerformed
        // NOVO EQUIPAMENTO -> JANELA DE CONSULTA EQUIPAMENTO
        LimpaTabelaConsultaEquipamentos();
        jDialogConsultaEquipamentos.setVisible(false);
        jDialogNovoEquipamento.setLocationRelativeTo(this);
        jDialogNovoEquipamento.setVisible(true);
        //BUTOES
        jButtonActualizar.setVisible(false);
        jButtonGuardarEquipametno.setVisible(true);
    }//GEN-LAST:event_jButtonNovoEquipamentoActionPerformed

    private void jButtonSairConsultaEquipamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairConsultaEquipamentosActionPerformed
        //BOTAO SAIR DE CONSULTA DE EQUIPAMENTOS
        jDialogConsultaEquipamentos.setVisible(false);
        LimpaTabelaConsultaEquipamentos();
    }//GEN-LAST:event_jButtonSairConsultaEquipamentosActionPerformed

    private void jButtonManutencaoConsultaEquipamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManutencaoConsultaEquipamentosActionPerformed
        // BOTAO DE MANUTENÇÃO -> JANELA CONSULTA EQUIPAMENTOS
        int linha = jTableConsultaEquipamentos.getSelectedRow();
        
        
        if (linha == -1){
            JOptionPane.showMessageDialog(jDialogConsultaEquipamentos, "Seleccione a Linha de um Equipamento!");
        }else{
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaEquipamentos.getValueAt(linha, 0);
            
            idEquipamentoSelecionado = selectId("EQUIPAMENTOS", "NOME", nomeEquipamento, "IDEQUIPAMENTO");
            LerBDFuncionario();
            jDialogNovaManutencaoEquipamento.setLocationRelativeTo(this);
            jDialogNovaManutencaoEquipamento.setVisible(true);
            
            System.out.println("\n***BOTAO DE MANUTENÇÃO -> JANELA CONSULTA DADOS");
            System.out.println("NOME EQUIPAMENTO SELEC.: " + nomeEquipamento );
            System.out.println("ID EQUIPAMENTO SELEC.: " + idEquipamentoSelecionado);
            
        }
        
        
       
    }//GEN-LAST:event_jButtonManutencaoConsultaEquipamentosActionPerformed

    private void jButtonGravarManutencaoEquipametnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarManutencaoEquipametnoActionPerformed
        // BOTAO GRAVAR MANUTENCAO DE UM EQUIPAMETNO
        String observacao =  jTextAreaObservacaoManutencaoEquipameto.getText();
        
        if (observacao.equals("")){
            JOptionPane.showMessageDialog(jDialogNovaManutencaoEquipamento, "Introduza a Descrição da Manutenção!");
        } else{      
            
            InserirManuencaoEquipamento();
            jDialogNovaManutencaoEquipamento.setVisible(false);
            
            LimpaTabelaConsultaManutencaoEquipamentos();
            ConsultaManutencaoEquipamentos();
            
            jDialogConsultaManutencaoEquipamentos.setLocationRelativeTo(this);
            jDialogConsultaManutencaoEquipamentos.setVisible(true);
            
        }
    }//GEN-LAST:event_jButtonGravarManutencaoEquipametnoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTAO VOLTAR -> JANELA CONSULTA MANUTENCAO EQUIPAMENTOS
        jDialogConsultaManutencaoEquipamentos.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonSairManutencaoEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairManutencaoEquipamentoActionPerformed
        // BOTAO SAIR NOVA MANUTENÇÃO DE EQUIPAMENTOS
        jDialogNovaManutencaoEquipamento.setVisible(false);
    }//GEN-LAST:event_jButtonSairManutencaoEquipamentoActionPerformed

    private void jButtonControloResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonControloResultadosActionPerformed
        // CONSULTAR CONTROLO DE RESULTADOS -> JANELA CONSULTA EQUIPAMENTOS
        int linha = jTableConsultaEquipamentos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDialogConsultaEquipamentos, "Seleccione a Linha de um Equipamento!");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaEquipamentos.getValueAt(linha, 0);

            idEquipamentoSelecionado = selectId("EQUIPAMENTOS", "NOME", nomeEquipamento, "IDEQUIPAMENTO");

            LimpaTabelaConsultaControloResultados();
            ConsultaControloResultadosEquipamento();

            if (CONTA_LINHAS_CONTROLORESULTADOS == 0) {
                JOptionPane.showMessageDialog(jDialogConsultaEquipamentos, "Não Existe Nenhum Registo Nesta Secção ! ");
            }else {
              jDialogConsultaControloResultadosEquipamento.setLocationRelativeTo(this);
              jDialogConsultaControloResultadosEquipamento.setVisible(true);
            }

            
            System.out.println("\n***BOTAO DE CONTROLO RESULTADOS -> JANELA CONSULTA DADOS");
            System.out.println("NOME EQUIPAMENTO SELEC.: " + nomeEquipamento);
            System.out.println("ID EQUIPAMENTO SELEC.: " + idEquipamentoSelecionado);
            
           
        }
        
       
        
    }//GEN-LAST:event_jButtonControloResultadosActionPerformed

    private void jButtonSairControloResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairControloResultadoActionPerformed
        // BOTAO SAIR CONTROLO RESULTADOS
        jDialogConsultaControloResultadosEquipamento.setVisible(false);
    }//GEN-LAST:event_jButtonSairControloResultadoActionPerformed

    private void jButtonEditarEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarEquipamentoActionPerformed
        // BOTAO EDITAR EQUIPAMENTO -> JANELA CONSULTA EQUIPAMENTOS
        int linha = jTableConsultaEquipamentos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDialogConsultaEquipamentos, "Seleccione a Linha de um Equipamento!");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaEquipamentos.getValueAt(linha, 0);

            idEquipamentoSelecionado = selectId("EQUIPAMENTOS", "NOME", nomeEquipamento, "IDEQUIPAMENTO");

            jDialogNovoEquipamento.setLocationRelativeTo(this);
            jDialogNovoEquipamento.setVisible(true);
            ConsultaDadosEquipamentoAlterar();
            
            // ESCONDER O BOTAO DE GUARDA
            jButtonGuardarEquipametno.setVisible(false);
            jButtonActualizar.setVisible(true);
            
            System.out.println("\n***BOTAO DE CONTROLO RESULTADOS -> JANELA CONSULTA DADOS");
            System.out.println("NOME EQUIPAMENTO SELEC.: " + nomeEquipamento);
            System.out.println("ID EQUIPAMENTO SELEC.: " + idEquipamentoSelecionado);
        }
    }//GEN-LAST:event_jButtonEditarEquipamentoActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        // BOTAO ACTUALIZAR EQIPAMENTO -> JANELA NOVO EQUIPAMETNO
       String nome = jTextFieldNomeEquipamento.getText();
       
       
       if (nome.equals("")){
           JOptionPane.showMessageDialog(null, "Insira o Nome do Equipamento!");
       } else{
           UpdateDadosEquipamento();  
           jDialogNovoEquipamento.setVisible(false);
           LimpaCamposNovoEquipamento();
           LimpaTabelaConsultaEquipamentos();
           ConsultaEquipamentos();
       }
           
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jButtonVerNaoConformidadesEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerNaoConformidadesEquipamentoActionPerformed
        // BOTAO VER NAO CONFORMIDADES -> JANELA CONSULTA CONROLS DE RESULTADOS
        int linha = jTableConsultaControloResultado.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione a Linha de um Controlo de Resultados!");
        } else {
            //VERIFICAR SE A LINHA DA TABELA  TEM RESULTADO C OU NC
            
            //NOME FUNCIOCARIO
            String nomeFuncionario = (String) jTableConsultaControloResultado.getValueAt(linha, 0);
            String resultado = (String) jTableConsultaControloResultado.getValueAt(linha, 3);


            if (resultado.equals("NC")) {


                //DEVOLVE O ID FUNCIONARIO
                idFuncionarioSelecionadoNaoConformidade = selectId("FUNCIONARIO", "NOME", nomeFuncionario, "IDFUNCIONARIO");

                //FUNÇÃO PARA CARREGAR OS DADOS PARA A TABELA
                LimpaTabelaConsultaNaoConformidades();
                ConsultaNaoConformidadesEquipamento(idFuncionarioSelecionadoNaoConformidade);

                if (CONTA_LINAS_NAOCONFORMIDADES == 0) {
                    JOptionPane.showMessageDialog(jDialogConsultaControloResultadosEquipamento, "Equipamento Ainda não contem nenhuma Não Conformidade  ! ");
                } else {
                    jDialogConsultaNaoConformidades.setLocationRelativeTo(this);
                    jDialogConsultaNaoConformidades.setVisible(true);
                }

            } else {
                JOptionPane.showMessageDialog(jDialogConsultaControloResultadosEquipamento, "Linha Selecciona não contem Nehuma Não Conformidade ! ");
            }
            
        }
    }//GEN-LAST:event_jButtonVerNaoConformidadesEquipamentoActionPerformed

    private void jButtonSairNaoConformidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairNaoConformidadesActionPerformed
        // BOTAO SSAIR -> JANELA NAO CONFORMIDADES
        jDialogConsultaNaoConformidades.setVisible(false);
        LimpaTabelaConsultaNaoConformidades();
    }//GEN-LAST:event_jButtonSairNaoConformidadesActionPerformed

    private void jButtonConsultaManutencaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaManutencaoActionPerformed
        // BOTAO CONSULTA MANUTENÇÃO -> JANALE CONSULTA EQUIPAMENTOS
        int linha = jTableConsultaEquipamentos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDialogConsultaEquipamentos, "Seleccione a Linha de um Equipamento!");
        } else {
             //DEVOLVE O NOME DO EQUIPAMENTO
            String nomeEquipamento = (String) jTableConsultaEquipamentos.getValueAt(linha, 0);

            idEquipamentoSelecionado = selectId("EQUIPAMENTOS", "NOME", nomeEquipamento, "IDEQUIPAMENTO");

            LimpaTabelaConsultaManutencaoEquipamentos();
            ConsultaManutencaoEquipamentos();          
            
            if (CONTA_LINHAS_MANUTENCAO == 0){
                JOptionPane.showMessageDialog(jDialogConsultaEquipamentos, "Equipamento Não têm Nenhuma Manutenção ! ");
            } else{            
                jDialogConsultaManutencaoEquipamentos.setLocationRelativeTo(this);
                jDialogConsultaManutencaoEquipamentos.setVisible(true);
            }
            
            
            System.out.println("\n***BOTAO CONSULTA MANUTENÇÕES -> JANELA CONSULTA EQUIPAMENTOS");
            System.out.println("NOME EQUIPAMENTO SELEC.: " + nomeEquipamento);
            System.out.println("ID EQUIPAMENTO SELEC.: " + idEquipamentoSelecionado);
        }
    }//GEN-LAST:event_jButtonConsultaManutencaoActionPerformed

    private void jTextFieldPesquisaEquipamentoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldPesquisaEquipamentoCaretUpdate
        // TEXTFIEL PESQUISAR EQUIPAMENTO
       LimpaTabelaConsultaEquipamentos();
       PesquisarEquipamento();
        
    }//GEN-LAST:event_jTextFieldPesquisaEquipamentoCaretUpdate

    
   /* **********************************  FUNÇOES ***************************************************** */   
    
   /*   LER                 */
    private void LerBDFuncionario(){
    //LIMPAR A COMBO
        jComboBoxFuncionarioResponsavel.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();
        
        try{   
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        
        }catch(ClassNotFoundException e){
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        
        try{
            con = DriverManager.getConnection(url);
            //            stmt = con.createStatement();
            String nomeTabela = "FUNCIONARIO";
            String sql = "SELECT * FROM " +nomeTabela; 
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();
            
        }catch(SQLException ex){
            System.err.println("SQLException: " + ex.getMessage()); 
        }
        
        jComboBoxFuncionarioResponsavel.addItem("--Funcionario--");
        Iterator<String> it = opcao.iterator();
        while(it.hasNext()){
            jComboBoxFuncionarioResponsavel.addItem(it.next());
        }
    
    }
    
   /*   INSERT  */ 
    private void InserirNovoEquipamento(){
        //DAODS A GRAVAR 
        String nomeEquipamento = jTextFieldNomeEquipamento.getText();
        String observacaoEquipamento = jTextAreaObservacaoNovoEquipamento.getText();


        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "EQUIPAMENTOS";
            sql = "INSERT INTO " + nomeTabela + "(NOME,DESCRICAO)" + " values(" + "'" + nomeEquipamento + "'" + "," + "'" + observacaoEquipamento + "'" + ")";
            
            
            JOptionPane.showMessageDialog(jDialogNovoEquipamento, "Equipamento Gravado Com Sucesso !");
            
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        System.out.println("\n*** INSERIR NOVO EQUIPAMENTO");
        System.out.println("NOME: " + nomeEquipamento);
        System.out.println("OBSERVAÇÃO: " + observacaoEquipamento);

    }
    
    private void InserirManuencaoEquipamento(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        //DADOS A INSERIR 
        int idEquip = idEquipamentoSelecionado;
        int idFuncionarioRresponsavel = 0;
        String data = (String) sdf.format(jDateChooserDataManutencaoEquipamento.getDate());
        String observacoes = jTextAreaObservacaoManutencaoEquipameto.getText();
        String fichaTecnica = "";
        
        
        //VERIFICAR QUAL O FUNCIONARIO QUE ESTA SELECIONADO NA COMBOBOX
      
        String comboFuncio = jComboBoxFuncionarioResponsavel.getSelectedItem().toString();
        if (!comboFuncio.equals("--Funcionario--")){
            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }        
            
            try{
                con = DriverManager.getConnection(url);
                String nomeTabela = "FUNCIONARIO";
                String sql = "SELECT * FROM "+nomeTabela+" WHERE NOME='"+comboFuncio+"'";
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                
                while(rs.next()){
                    idFuncionarioRresponsavel = rs.getInt("IDFUNCIONARIO");
                }
                st.close();
                con.close();
            }catch (SQLException ex){
                 System.err.println("SQLException: " + ex.getMessage());
            }
        
        }
        
        //INSERIR OS DADOS NA TABELA
        
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }
            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "MANUTENCAOEQUIPAMENTOS";
                sql = "INSERT INTO " + nomeTabela + "(IDEQUIPAMENTO,IDFUNCIONARIO,DATA,OBSERVACOES,FICHATECNICA)" + " values("+ idEquip + "," +idFuncionarioRresponsavel + "," + "'" + data + "'" + "," + "'" + observacoes + "'"+"," + "'" + fichaTecnica+ "'"  + ")";

                
                JOptionPane.showMessageDialog(jDialogNovaManutencaoEquipamento, "Manutenção Adicionada Com Sucesso !");
                
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                st.executeUpdate();
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        
            System.out.println("\n*** INSERIR NOVA MANUTENÇÃO -> VINDA DA CONSULTA DOS EQUIPAMETNO");
            System.out.println("ID EQUIPAMENTO SELECIONADO: " + idEquip);
            System.out.println("FUNCIOANRIO RESPONSAVEL: " + idFuncionarioRresponsavel);
            System.out.println("DATA: " + data);
            System.out.println("OBSERVAÇÕES: " + observacoes);
        
    }
    
  
    /*  CONSULTAR   */
    private void ConsultaEquipamentos(){
        String nomeEquipamento = "";
        String descricaoEquipamento = "";
        
        model = (DefaultTableModel) jTableConsultaEquipamentos.getModel();
                
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }    
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "EQUIPAMENTOS";
            String sql = "SELECT * FROM "+nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                nomeEquipamento =  rs.getString("NOME");
                descricaoEquipamento =  rs.getString("DESCRICAO");
                
                model.addRow(new Object[]{nomeEquipamento, descricaoEquipamento});
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
        
    }
    
    private void ConsultaManutencaoEquipamentos(){
        int idEquip = 0;
        String nomeEquip = "";
        String data = "";
        String observacoes = "";
        String fichaTecnica = "";
        
        model = (DefaultTableModel) jTableConsultaManutencaoEquipamentos.getModel();
        CONTA_LINHAS_MANUTENCAO = 0;      
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }    
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "MANUTENCAOEQUIPAMENTOS";
            String sql = "SELECT * FROM "+nomeTabela + " WHERE IDEQUIPAMENTO="+idEquipamentoSelecionado;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                idEquip = rs.getInt("IDEQUIPAMENTO");
                nomeEquip = selectString("EQUIPAMENTOS", "IDEQUIPAMENTO", idEquip, "NOME");
                data =  rs.getString("DATA");
                observacoes =  rs.getString("OBSERVACOES");
                fichaTecnica = rs.getString("FICHATECNICA");
                
                model.addRow(new Object[]{nomeEquip, data, observacoes, fichaTecnica});
                CONTA_LINHAS_MANUTENCAO++;
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    
    private void ConsultaControloResultadosEquipamento(){
       // int idEquip = idEquipamentoSelecionado;
        
        //CAMPOS DA TABELA
        int idFuncionario = 0;
        String nomeFuncionario = "";
        int idEquipamento = 0;
        String nomeEquipamento = "";
        String data = "";
        String resultado = "";
        String fichaTecnica = "";
        String descricao = "";
        
    
        
        model = (DefaultTableModel) jTableConsultaControloResultado.getModel();
                
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }    
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "SELECT * FROM "+nomeTabela + " WHERE IDEQUIPAMENTO="+idEquipamentoSelecionado;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                idFuncionario = rs.getInt("IDFUNCIONARIO");
                nomeFuncionario = selectString("FUNCIONARIO", "IDFUNCIONARIO", idFuncionario, "NOME");
                
                idEquipamento = rs.getInt("IDEQUIPAMENTO");
                nomeEquipamento = selectString("EQUIPAMENTOS", "IDEQUIPAMENTO", idEquipamento, "NOME");
                
                data =  rs.getString("DATA");
                resultado =  rs.getString("RESULTADO");
                fichaTecnica = rs.getString("FICHATECNICA");
                descricao =  rs.getString("DESCRICAO");
                
                model.addRow(new Object[]{nomeFuncionario, nomeEquipamento, data, resultado, fichaTecnica, descricao});
                CONTA_LINHAS_CONTROLORESULTADOS++;
            }
            
          
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
        
    }
    
    private void ConsultaDadosEquipamentoAlterar(){
        String nomeEquipamento = "";
        String descricaoEquipamento = "";
                   
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }    
        
        try{
                     
            con = DriverManager.getConnection(url);
            String nomeTabela = "EQUIPAMENTOS";
            String sql = "SELECT * FROM "+nomeTabela + " WHERE IDEQUIPAMENTO="+idEquipamentoSelecionado;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
           
            while(rs.next()){
                nomeEquipamento =  rs.getString("NOME");
                descricaoEquipamento =  rs.getString("DESCRICAO");
                
                jTextFieldNomeEquipamento.setText(nomeEquipamento);
                jTextAreaObservacaoNovoEquipamento.setText(descricaoEquipamento);
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    
    private void ConsultaNaoConformidadesEquipamento(int idFuncionarioSelecionado){
        int funcionario = idFuncionarioSelecionado;
        //DADOS DA TABELA
        int idFuncionario = 0;
        String dataNaoConform = "";
        String ocorrencia = "";
        String medidaCorrecti = "";
        String resultado = "NC";
        String nomefuncionario = "";
        String correctiva = "N";
        int idFuncionarioResponsavel = 0;
        String nomeFuncionarioResponsavel = "";
        
        model = (DefaultTableModel) jTableNaoConformidadesEquipamento.getModel();
        CONTA_LINAS_NAOCONFORMIDADES = 0;
        try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");  
        }catch(ClassNotFoundException e){
           System.err.print("ClassNotFoundException: ");
           System.err.println(e.getMessage());
           System.out.println("O driver expecificado nao foi encontrado."); 
        }      
        
        try{         
            con = DriverManager.getConnection(url);
            String nomeTabela = "CONTROLORESULTADOS";
            String sql = "select * from "+nomeTabela+" where IDFUNCIONARIO="+funcionario +"and RESULTADO="+"'"+ resultado +"'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
                   
            while(rs.next()){
                idControloResultadosID = rs.getInt("IDCONTRESULTADOS");
                System.out.println("IDCONTROLORESULTADO Pesquisar -> " + idControloResultadosID); 
                 //VARIVAEL GLOBAL
            
                //ESCREVER NA TABELA A PESQUISA
                String nomeTabela2 = "NAOCONFORMIDADES";
                String sql2 = "select * from "+nomeTabela2+" where IDCONTRESULTADOS="+idControloResultadosID+" and CORRECTIVA='"  + correctiva + "'";
                PreparedStatement st2 = (PreparedStatement) con.prepareStatement(sql2);
                ResultSet rs2 = st2.executeQuery();
                
                while(rs2.next()){
                    
                    //idNaoConformidade = rs2.getInt("IDNAOCONF");
                    //idContResultado = rs2.getInt("IDCONTRESULTADOS");
                    
                    idFuncionario = rs2.getInt("IDFUNCIONARIO");
                    nomefuncionario = selectString("FUNCIONARIO","IDFUNCIONARIO",idFuncionario,"NOME"); 
                    
                    dataNaoConform = rs2.getString("DATANAOCONFORMIDADE");
                    ocorrencia = rs2.getString("OCORRENCIA");
                    medidaCorrecti = rs2.getString("MEDIDACORRECTIVA");
                    
                    idFuncionarioResponsavel = rs2.getInt("IDFUNCIONARIOMEDIDACORRECTIVA");
                    nomeFuncionarioResponsavel = selectString("FUNCIONARIO","IDFUNCIONARIO",idFuncionarioResponsavel,"NOME"); 
                    
                    model.addRow(new Object[]{nomefuncionario, dataNaoConform, ocorrencia, nomeFuncionarioResponsavel, medidaCorrecti});
                    
                    //contaNaoConformidade_MedidasCorrectivas++;
                    //idContResultadosUltimo = idContResultado;
                    CONTA_LINAS_NAOCONFORMIDADES++;
                }
                st2.close();               
            }
            
            st.close();
            con.close();
        }catch (SQLException ex){
            System.err.println("SQLException: " + ex.getMessage());
        } 
        
        
              
        
        
    }
     
    
    /*  PESQUISAR   */
    private void PesquisarEquipamento(){
         // DADOS A EPSQUISAR
        
        String nome = "";
        String descricao = "";
        
        String pesquisa = jTextFieldPesquisaEquipamento.getText();
        
        model = (DefaultTableModel) jTableConsultaEquipamentos.getModel();
        
          try{
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        }catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado."); 
        }
          
          
        try{
            con = DriverManager.getConnection(url);
            String nomeTabela = "EQUIPAMENTOS";
            sql = "select * from "+ nomeTabela+" where NOME like '"+pesquisa+ "%'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()){                
                nome = rs.getString("NOME");
                descricao = rs.getString("DESCRICAO");
               
                //guardar dados num arraylist e adicionalos a tabela
                model.addRow(new Object[]{nome, descricao});
            }
            st.close();
            con.close();
        }catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
    }
    
    
    /*  UPDATE  */
     private void UpdateDadosEquipamento(){
         String nome =  jTextFieldNomeEquipamento.getText();
         String descricao =  jTextAreaObservacaoNovoEquipamento.getText();
         
         
         System.out.println("\n** ACTUALIZA EQUIPAMENTO SELECIONADO");
         System.out.println("NOME: " + nome);
         System.out.println("DESCRICAO: " + descricao);
         try {
             Class.forName("org.apache.derby.jdbc.ClientDriver");
         } catch (ClassNotFoundException e) { //driver não encontrado
             System.err.print("ClassNotFoundException: ");
             System.err.println(e.getMessage());
             System.out.println("O driver expecificado nao foi encontrado.");
         }

         try {
             con = DriverManager.getConnection(url);
             String nomeTabela = "EQUIPAMENTOS";
             String sql = "UPDATE " + nomeTabela + " SET NOME='" + nome +"'"+ ","+" DESCRICAO='" + descricao +"' WHERE IDEQUIPAMENTO=" + idEquipamentoSelecionado;
             PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
             st.executeUpdate();


             st.close();
             con.close();
         } catch (SQLException ex) {
             System.err.println("SQLException: " + ex.getMessage());
         }

         
     }
    
    /*   LIMPAR  */
    private void LimpaCamposNovoEquipamento(){
        jTextFieldNomeEquipamento.setText("");
        jTextAreaObservacaoNovoEquipamento.setText("");
    }
    
    private void LimpaTabelaConsultaEquipamentos(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaEquipamentos.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    private void LimpaTabelaConsultaManutencaoEquipamentos(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaManutencaoEquipamentos.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    private void LimpaTabelaConsultaControloResultados(){
        DefaultTableModel model = (DefaultTableModel) jTableConsultaControloResultado.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    private void LimpaTabelaConsultaNaoConformidades(){
        DefaultTableModel model = (DefaultTableModel) jTableNaoConformidadesEquipamento.getModel();
        int linhas = model.getRowCount();
        
        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    
    
    
    /*  VERIFICAÇÃO */

    
    
   /*   FUNÇAO PARA LER OS CAMPO DE UMA TABELAS */
    private int selectId(String tab, String col, String cam, String colId){
        int resultId = 0;
        String tabela = tab;
        String coluna = col;
        String campo = cam;
        String colunaId = colId;
        
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }                
            try {
                con = DriverManager.getConnection(url);
                sql = "select * from "+ tabela+ " where "+coluna+"='"+campo+"'";
                
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    resultId = rs.getInt(colunaId);
                }
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        return resultId;
    }
    
    private String selectString(String tab, String col, int cam, String colNome){
        String resultString = "";
        String tabela = tab;
        String coluna = col;
        int campo = cam;
        String colunaNome = colNome;
        
        try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }                
            try {
                con = DriverManager.getConnection(url);
                sql = "select * from "+ tabela+ " where "+coluna+"="+campo+" ";
                
                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    resultString = rs.getString(colunaNome);
                }
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
            
        return resultString;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Equipamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Equipamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Equipamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Equipamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Equipamentos().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonAddNovoEquipa;
    private javax.swing.JButton jButtonConsultaEquipamentos;
    private javax.swing.JButton jButtonConsultaManutencao;
    private javax.swing.JButton jButtonControloResultados;
    private javax.swing.JButton jButtonEditarEquipamento;
    private javax.swing.JButton jButtonEntrarEquipamentos;
    private javax.swing.JButton jButtonGravarManutencaoEquipametno;
    private javax.swing.JButton jButtonGuardarEquipametno;
    private javax.swing.JButton jButtonManutencaoConsultaEquipamentos;
    private javax.swing.JButton jButtonNovoEquipamento;
    private javax.swing.JButton jButtonSairConsultaEquipamentos;
    private javax.swing.JButton jButtonSairControloResultado;
    private javax.swing.JButton jButtonSairManutencaoEquipamento;
    private javax.swing.JButton jButtonSairNaoConformidades;
    private javax.swing.JButton jButtonSairNovoEquipamento;
    private javax.swing.JButton jButtonVerNaoConformidadesEquipamento;
    private javax.swing.JComboBox jComboBoxFuncionarioResponsavel;
    private com.toedter.calendar.JDateChooser jDateChooserDataManutencaoEquipamento;
    private javax.swing.JDialog jDialogConsultaControloResultadosEquipamento;
    private javax.swing.JDialog jDialogConsultaEquipamentos;
    private javax.swing.JDialog jDialogConsultaManutencaoEquipamentos;
    private javax.swing.JDialog jDialogConsultaNaoConformidades;
    private javax.swing.JDialog jDialogMenuEquipamentos;
    private javax.swing.JDialog jDialogNovaManutencaoEquipamento;
    private javax.swing.JDialog jDialogNovoEquipamento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelDescrição;
    private javax.swing.JLabel jLabelFuncionarioResponsavel;
    private javax.swing.JLabel jLabelManutencaoEquipametno;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelNovoEquipametno;
    private javax.swing.JLabel jLabelPesquisarEquipamento;
    private javax.swing.JPanel jPanelConsultaEquipamentos;
    private javax.swing.JPanel jPanelConsultaManutencaoEquipamentos;
    private javax.swing.JPanel jPanelControloResultados;
    private javax.swing.JPanel jPanelManutencaoEquipamento;
    private javax.swing.JPanel jPanelMenuEquipamentos;
    private javax.swing.JPanel jPanelNaoConformidades;
    private javax.swing.JPanel jPanelNovoEquipamento;
    private javax.swing.JScrollPane jScrollPaneConsultaControloResultados;
    private javax.swing.JScrollPane jScrollPaneConsultaEquipamentos;
    private javax.swing.JScrollPane jScrollPaneConsultaManutencaoEquipamentos;
    private javax.swing.JScrollPane jScrollPaneNaoConformidades;
    private javax.swing.JScrollPane jScrollPaneNovoEquipmanentoObservacao;
    private javax.swing.JScrollPane jScrollPaneObservacaManuetencaoEquipametno;
    private javax.swing.JTable jTableConsultaControloResultado;
    private javax.swing.JTable jTableConsultaEquipamentos;
    private javax.swing.JTable jTableConsultaManutencaoEquipamentos;
    private javax.swing.JTable jTableNaoConformidadesEquipamento;
    private javax.swing.JTextArea jTextAreaObservacaoManutencaoEquipameto;
    private javax.swing.JTextArea jTextAreaObservacaoNovoEquipamento;
    private javax.swing.JTextField jTextFieldNomeEquipamento;
    private javax.swing.JTextField jTextFieldPesquisaEquipamento;
    // End of variables declaration//GEN-END:variables
}
